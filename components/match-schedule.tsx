"use client"

import { useState, useRef, useEffect } from "react"
import { Calendar, Clock, MapPin, Trophy, Plus, Edit, Trash2, Send, Bot, X, Upload, Image, Sparkles, Volume2, VolumeX, Smile, Star, Goal, Flag, List, Settings, Globe, Mic, Timer, ArrowUpDown, Volume, Languages, RotateCcw } from "lucide-react"
import { Button } from "@/components/ui/button"
import { Dialog, DialogContent, DialogHeader, DialogTitle, DialogDescription } from "@/components/ui/dialog"
import { Input } from "@/components/ui/input"
import { Label } from "@/components/ui/label"
import { Textarea } from "@/components/ui/textarea"
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from "@/components/ui/select"
import { Switch } from "@/components/ui/switch"
import { Badge } from "@/components/ui/badge"
import { Popover, PopoverContent, PopoverTrigger } from "@/components/ui/popover"
import type { Match, Team, Player } from "@/lib/types"
import ConfirmDeleteDialog from "@/components/confirm-delete-dialog"
import { ScrollArea } from "@/components/ui/scroll-area"
import { cn } from "@/lib/utils"
import PlayerRating from "@/components/player-rating"
import MatchEvents, { MatchEvents as MatchEventsType } from "@/components/match-events"
import { Slider } from "@/components/ui/slider"
import { Bookmark } from "lucide-react"

// Define Web Speech API types
interface SpeechRecognitionEvent extends Event {
  resultIndex: number;
  results: {
    [index: number]: {
      [index: number]: {
        transcript: string;
        confidence: number;
      };
      isFinal: boolean;
      length: number;
    };
    length: number;
  };
}

interface SpeechRecognitionErrorEvent extends Event {
  error: string;
  message?: string;
}

interface SpeechRecognition extends EventTarget {
  continuous: boolean;
  interimResults: boolean;
  lang: string;
  maxAlternatives: number;
  start(): void;
  stop(): void;
  abort(): void;
  onresult: ((event: SpeechRecognitionEvent) => void) | null;
  onerror: ((event: SpeechRecognitionErrorEvent) => void) | null;
  onend: (() => void) | null;
  onstart: (() => void) | null;
}

// Extend Window interface to include speech recognition
declare global {
  interface Window {
    SpeechRecognition?: new () => SpeechRecognition;
    webkitSpeechRecognition?: new () => SpeechRecognition;
  }
}

// Define the PlayerRatingsData interface here to match the one from player-rating.tsx
interface PlayerRating {
  playerId: string
  score: number
  isMVP?: boolean
  comment?: string
}

interface PlayerRatingsData {
  matchId: string
  homeTeamRatings: PlayerRating[]
  awayTeamRatings: PlayerRating[]
  homeMVP?: string
  awayMVP?: string
}

interface MatchScheduleProps {
  matches: Match[]
  onAddMatch: (match: Match) => void
  onUpdateMatch: (match: Match) => void
  onDeleteMatch: (id: string) => void
  homeTeam: Team
  awayTeam: Team
  onUpdateHomeTeam?: (team: Team) => void
  onUpdateAwayTeam?: (team: Team) => void
}

// Types for AI Agent
type AgentAction =
  | { type: 'ADD_MATCH', match: Partial<Match> }
  | { type: 'FILTER_MATCHES', filter: string }
  | { type: 'FIND_MATCH', criteria: string }
  | { type: 'NONE' };

// Types for reactions
type Reaction = {
  emoji: string;
  count: number;
  users: string[];
  timestamp: number;
}

// Types for messages with reactions
type ChatMessage = {
  role: 'user' | 'ai' | 'agent';
  content: string;
  id: string;
  reactions?: Record<string, Reaction>;
}

// Types for translation
type TranslationLanguage = {
  code: string;
  name: string;
  flag: string;
}

type TranslationResult = {
  translatedText: string;
  detectedSourceLanguage?: string;
  confidence?: number;
}

// Match events interfaces
interface MatchGoal {
  id: string
  playerId: string
  teamId: string
  minute: number
  assistPlayerId?: string
  isOwnGoal?: boolean
  isPenalty?: boolean
  note?: string
}

interface MatchCard {
  id: string
  playerId: string
  teamId: string
  minute: number
  type: 'yellow' | 'red'
  reason?: string
}

interface MatchEvents {
  goals: MatchGoal[]
  cards: MatchCard[]
}

// Define keyframes animation for notifications
const fadeInOutKeyframes = `
  @keyframes fadeInOut {
    0% { opacity: 0; transform: translateY(-10px); }
    10% { opacity: 1; transform: translateY(0); }
    90% { opacity: 1; transform: translateY(0); }
    100% { opacity: 0; transform: translateY(-10px); }
  }
`;

export default function MatchSchedule({
  matches,
  onAddMatch,
  onUpdateMatch,
  onDeleteMatch,
  homeTeam,
  awayTeam,
  onUpdateHomeTeam,
  onUpdateAwayTeam
}: MatchScheduleProps) {
  const [isDialogOpen, setIsDialogOpen] = useState(false)
  const [editingMatch, setEditingMatch] = useState<Match | null>(null)
  const [filter, setFilter] = useState<"all" | "upcoming" | "completed">("all")
  const [isDeleteDialogOpen, setIsDeleteDialogOpen] = useState(false)
  const [matchIdToDelete, setMatchIdToDelete] = useState<string | null>(null)
  const [isRatingDialogOpen, setIsRatingDialogOpen] = useState(false)
  const [ratingMatch, setRatingMatch] = useState<Match | null>(null)
  const [isEventsDialogOpen, setIsEventsDialogOpen] = useState(false)
  const [eventsMatch, setEventsMatch] = useState<Match | null>(null)

  // AI chat states
  const [aiQuestion, setAiQuestion] = useState("")
  const [aiResponse, setAiResponse] = useState("")
  const [isAiLoading, setIsAiLoading] = useState(false)
  const [showAiSidebar, setShowAiSidebar] = useState(false)
  const [chatMessages, setChatMessages] = useState<ChatMessage[]>([])
  const [uploadedImage, setUploadedImage] = useState<string | null>(null)
  const [imageFile, setImageFile] = useState<File | null>(null)
  const [pendingAgentAction, setPendingAgentAction] = useState<AgentAction | null>(null)
  const fileInputRef = useRef<HTMLInputElement>(null)
  const [isChatDialogOpen, setIsChatDialogOpen] = useState(false)
  const [customApiKey, setCustomApiKey] = useState("")
  const [useCustomApiKey, setUseCustomApiKey] = useState(false)
  const [chatDialogQuestion, setChatDialogQuestion] = useState("")
  const [showingEmojiFor, setShowingEmojiFor] = useState<string | null>(null)

  // Translation states
  const [isTranslating, setIsTranslating] = useState(false)
  const [showTranslationPanel, setShowTranslationPanel] = useState(false)
  const [sourceLanguage, setSourceLanguage] = useState("auto")
  const [targetLanguage, setTargetLanguage] = useState("en-US")
  const [translatedText, setTranslatedText] = useState("")
  const [translationError, setTranslationError] = useState<string | null>(null)
  const [currentInputType, setCurrentInputType] = useState<'ai' | 'chat'>('ai')

  // List of available emojis
  const availableEmojis = ["üëç", "‚ù§Ô∏è", "üòÇ", "üòÆ", "üò¢", "üëè", "üî•", "ÔøΩÔøΩ", "ü§î", "‚≠ê"]

  // Gemini API key
  const GEMINI_API_KEY = "AIzaSyCb2qpQWEHsmNQSOoM3re6yweTfxdJ8VFs"

  // M·∫´u tr·∫≠n ƒë·∫•u m·ªõi
  const newMatchTemplate: Match = {
    id: "",
    homeTeam: "",
    awayTeam: "",
    date: new Date().toISOString().split("T")[0],
    time: "19:00",
    venue: "",
    competition: "",
    completed: false,
  }

  // Speech synthesis state
  const [isSpeechEnabled, setIsSpeechEnabled] = useState(true)
  const [speechRate, setSpeechRate] = useState(1.0)
  const [speechPitch, setSpeechPitch] = useState(1.0)
  const [speechVolume, setSpeechVolume] = useState(1.0)
  const [selectedVoice, setSelectedVoice] = useState<string>("")
  const [availableVoices, setAvailableVoices] = useState<SpeechSynthesisVoice[]>([])
  const [isVoiceSettingsOpen, setIsVoiceSettingsOpen] = useState(false)
  const [selectedLanguage, setSelectedLanguage] = useState("vi-VN")
  const [useGoogleTTS, setUseGoogleTTS] = useState(true)
  const [autoDetectLanguage, setAutoDetectLanguage] = useState(true)
  const [lastDetectedLanguage, setLastDetectedLanguage] = useState<string | null>(null)
  const synth = typeof window !== 'undefined' ? window.speechSynthesis : null

  // Voice input (speech recognition) states
  const [isListening, setIsListening] = useState(false)
  const [transcript, setTranscript] = useState("")
  const [interimTranscript, setInterimTranscript] = useState("")
  const [recognitionLang, setRecognitionLang] = useState("vi-VN")
  const recognitionRef = useRef<SpeechRecognition | null>(null)
  const [recognitionError, setRecognitionError] = useState<string | null>(null)
  const [recognitionNotification, setRecognitionNotification] = useState<string | null>(null)
  const [silenceTimeout, setSilenceTimeout] = useState<NodeJS.Timeout | null>(null)

  // Ki·ªÉm tra ho·∫°t ƒë·ªông c·ªßa microphone
  const checkMicrophone = async (): Promise<boolean> => {
    try {
      const devices = await navigator.mediaDevices.enumerateDevices();
      const hasMicrophone = devices.some(device => device.kind === 'audioinput');

      if (!hasMicrophone) {
        setRecognitionError("Kh√¥ng t√¨m th·∫•y microphone. Vui l√≤ng k·∫øt n·ªëi microphone.");
        return false;
      }

      // Test microphone access
      const stream = await navigator.mediaDevices.getUserMedia({ audio: true });
      // Stop the test stream immediately
      stream.getTracks().forEach(track => track.stop());
      return true;
    } catch (err) {
      console.error("Microphone check failed:", err);
      setRecognitionError("Kh√¥ng th·ªÉ truy c·∫≠p microphone. Vui l√≤ng c·∫•p quy·ªÅn truy c·∫≠p.");
      return false;
    }
  };

  // Initialize speech recognition
  useEffect(() => {
    if (typeof window !== 'undefined') {
      // Check if the browser supports SpeechRecognition
      const SpeechRecognitionAPI = window.SpeechRecognition || window.webkitSpeechRecognition
      if (SpeechRecognitionAPI) {
        // Create a recognition instance
        const recognition = new SpeechRecognitionAPI()

        // C·∫•u h√¨nh ƒë·ªÉ nh·∫≠n d·∫°ng ch√≠nh x√°c h∆°n
        recognition.continuous = true
        recognition.interimResults = true
        recognition.lang = recognitionLang
        recognition.maxAlternatives = 3  // TƒÉng l√™n ƒë·ªÉ c√≥ nhi·ªÅu ph∆∞∆°ng √°n

        // T·∫Øt nh·∫≠n d·∫°ng t·ª± ƒë·ªông ƒë·ªÉ ch·ªù ng∆∞·ªùi d√πng n√≥i
        // @ts-ignore - Thu·ªôc t√≠nh kh√¥ng ti√™u chu·∫©n nh∆∞ng h·ªØu √≠ch trong Chrome
        if (typeof recognition.continuous !== 'undefined') {
          // @ts-ignore
          recognition.interimResults = true;
        }

        // TƒÉng ƒë·ªô nh·∫°y ƒë·ªÉ ph√°t hi·ªán gi·ªçng n√≥i t·ªët h∆°n
        try {
          // @ts-ignore - Config kh√¥ng ti√™u chu·∫©n
          if (typeof recognition.audioThreshold !== 'undefined') {
            // @ts-ignore
            recognition.audioThreshold = 0.2; // H·∫° ng∆∞·ª°ng ph√°t hi·ªán √¢m thanh
          }
        } catch (e) {
          console.log('Advanced audio config not available');
        }

        // Set up event handlers
        recognition.onstart = () => {
          console.log('Speech recognition started')
          setIsListening(true)
          setRecognitionError(null)
          // Clear any existing transcript when starting new session
          setInterimTranscript('')
        }

        recognition.onerror = (event: SpeechRecognitionErrorEvent) => {
          console.error('Speech recognition error', event.error)

          // X·ª≠ l√Ω c√°c l·ªói c·ª• th·ªÉ
          if (event.error === 'no-speech') {
            setRecognitionError("Kh√¥ng ph√°t hi·ªán gi·ªçng n√≥i. H√£y n√≥i to v√† r√µ r√†ng h∆°n.")

            // Kh√¥ng t·ª± ƒë·ªông d·ª´ng khi g·∫∑p l·ªói no-speech, thay v√†o ƒë√≥ th·ª≠ l·∫°i
            if (isListening) {
              // Hi·ªÉn th·ªã th√¥ng b√°o h∆∞·ªõng d·∫´n
              setInterimTranscript("Xin vui l√≤ng n√≥i to h∆°n... h·ªá th·ªëng ƒëang l·∫Øng nghe");

              // Th·ª≠ l·∫°i sau 1 gi√¢y
              setTimeout(() => {
                if (recognitionRef.current && isListening) {
                  try {
                    // Kh·ªüi ƒë·ªông l·∫°i recognition engine
                    recognitionRef.current.stop();
                    setTimeout(async () => {
                      if (recognitionRef.current && isListening) {
                        try {
                          // Ki·ªÉm tra microphone tr∆∞·ªõc khi kh·ªüi ƒë·ªông l·∫°i
                          const micOk = await checkMicrophone();
                          if (micOk && isListening) {
                            recognitionRef.current.start();
                            // L√†m m·ªõi tr·∫°ng th√°i l·ªói
                            setRecognitionError(null);
                          }
                        } catch (e) {
                          console.error('Mic check failed during restart', e);
                        }
                      }
                    }, 500);
                  } catch (e) {
                    console.error('Error restarting recognition', e);
                  }
                }
              }, 1500);
            }
            // Kh√¥ng ƒë·∫∑t isListening = false ·ªü ƒë√¢y ƒë·ªÉ tr√°nh k·∫øt th√∫c qu√° tr√¨nh ghi √¢m
            return;
          } else if (event.error === 'audio-capture') {
            setRecognitionError("Kh√¥ng t√¨m th·∫•y microphone. Vui l√≤ng ki·ªÉm tra thi·∫øt b·ªã v√† c·∫•p quy·ªÅn.");

            // Th·ª≠ ki·ªÉm tra microphone
            checkMicrophone().then(available => {
              if (available) {
                // Mic ok nh∆∞ng v·∫´n c√≥ l·ªói, c√≥ th·ªÉ l√† v·∫•n ƒë·ªÅ kh√°c
                setRecognitionError("Microphone ho·∫°t ƒë·ªông nh∆∞ng c√≥ l·ªói khi thu √¢m. Vui l√≤ng th·ª≠ l·∫°i.");
              }
            });
          } else if (event.error === 'not-allowed') {
            setRecognitionError("Tr√¨nh duy·ªát kh√¥ng ƒë∆∞·ª£c c·∫•p quy·ªÅn truy c·∫≠p microphone. Xin c·∫•p quy·ªÅn v√† th·ª≠ l·∫°i.");
          } else if (event.error === 'network') {
            setRecognitionError("L·ªói k·∫øt n·ªëi m·∫°ng khi nh·∫≠n d·∫°ng gi·ªçng n√≥i. Ki·ªÉm tra k·∫øt n·ªëi internet.");
          } else if (event.error === 'aborted') {
            // Ng∆∞·ªùi d√πng ho·∫∑c h·ªá th·ªëng h·ªßy b·ªè, kh√¥ng c·∫ßn th√¥ng b√°o l·ªói
            console.log('Recognition aborted');
          } else {
            setRecognitionError(`L·ªói nh·∫≠n d·∫°ng gi·ªçng n√≥i: ${event.error}. Vui l√≤ng th·ª≠ l·∫°i.`);
          }

          // D·ª´ng qu√° tr√¨nh ghi √¢m n·∫øu l·ªói nghi√™m tr·ªçng (kh√¥ng ph·∫£i no-speech)
          setIsListening(false)
        }

        recognition.onend = () => {
          console.log('Speech recognition ended')
          setIsListening(false)
        }

        recognition.onresult = (event: SpeechRecognitionEvent) => {
          // L√†m m·ªõi l·ªói khi nh·∫≠n ƒë∆∞·ª£c k·∫øt qu·∫£
          setRecognitionError(null)

          let interimText = ''
          let finalText = ''

          // Reset silence detector - user is speaking
          if (silenceTimeout) {
            clearTimeout(silenceTimeout);
            setSilenceTimeout(null);
          }

          // Kh√¥i ph·ª•c khi c√≥ ng∆∞·ªùi n√≥i
          if (interimTranscript.includes("Xin vui l√≤ng n√≥i to h∆°n")) {
            setInterimTranscript("");
          }

          // Process each result - l·∫•y k·∫øt qu·∫£ c√≥ ƒë·ªô tin c·∫≠y cao nh·∫•t
          for (let i = event.resultIndex; i < event.results.length; i++) {
            // T√¨m k·∫øt qu·∫£ c√≥ ƒë·ªô tin c·∫≠y cao nh·∫•t t·ª´ c√°c l·ª±a ch·ªçn
            let bestTranscript = "";
            let bestConfidence = 0;

            for (let j = 0; j < event.results[i].length; j++) {
              const currentTranscript = event.results[i][j].transcript;
              const currentConfidence = event.results[i][j].confidence;

              // Ch·ªçn k·∫øt qu·∫£ c√≥ ƒë·ªô tin c·∫≠y cao nh·∫•t
              if (currentConfidence > bestConfidence) {
                bestTranscript = currentTranscript;
                bestConfidence = currentConfidence;
              }
            }

            // L·ªçc k·∫øt qu·∫£ c√≥ ƒë·ªô tin c·∫≠y th·∫•p
            if (bestConfidence < 0.1) {
              console.log(`Skipping very low confidence (${bestConfidence}) result: ${bestTranscript}`);
              continue;
            }

            // L·ªçc nhi·ªÖu
            const cleaned = filterNoise(bestTranscript);

            if (event.results[i].isFinal) {
              // X·ª≠ l√Ω k·∫øt qu·∫£ cu·ªëi c√πng - ƒë√¢y l√† khi ng∆∞·ªùi d√πng ƒë√£ n√≥i xong m·ªôt c√¢u
              finalText += cleaned + ' ';

              // C·∫≠p nh·∫≠t transcript ngay l·∫≠p t·ª©c trong input
              // ƒêi·ªÅu n√†y ƒë·∫£m b·∫£o vƒÉn b·∫£n lu√¥n ƒë∆∞·ª£c ƒë∆∞a v√†o input ƒë·ªÉ ki·ªÉm tra
              if (showAiSidebar) {
                setAiQuestion(prev => {
                  const newText = prev + cleaned + ' ';
                  console.log("Updating aiQuestion with:", cleaned);
                  return newText;
                });
              } else if (isChatDialogOpen) {
                setChatDialogQuestion(prev => {
                  const newText = prev + cleaned + ' ';
                  console.log("Updating chatDialogQuestion with:", cleaned);
                  return newText;
                });
              }

              // Gi·ªØ b·∫£n ghi cho phi√™n l√†m vi·ªác
              setTranscript(prev => prev + cleaned + ' ');

              // ƒê·∫∑t timeout ƒë·ªÉ ph√°t hi·ªán ng∆∞·ªùi d√πng ng·ª´ng n√≥i
              const timeout = setTimeout(() => {
                if (recognitionRef.current && isListening) {
                  console.log("Silence detected, stopping recognition");
                  // T·∫°m d·ª´ng nh·∫≠n d·∫°ng khi ph√°t hi·ªán im l·∫∑ng
                  recognitionRef.current.stop();
                }
              }, 2000); // Gi·∫£m th·ªùi gian ch·ªù xu·ªëng 2s ƒë·ªÉ ph·∫£n ·ª©ng nhanh h∆°n
              setSilenceTimeout(timeout);
            } else {
              // K·∫øt qu·∫£ t·∫°m th·ªùi - ng∆∞·ªùi d√πng ƒëang n√≥i
              interimText += cleaned;
            }
          }

          // C·∫≠p nh·∫≠t transcript t·∫°m th·ªùi ƒë·ªÉ hi·ªÉn th·ªã
          setInterimTranscript(interimText);
        }

        // Save reference
        recognitionRef.current = recognition
      } else {
        console.warn('Speech recognition not supported in this browser')
        setRecognitionError("Tr√¨nh duy·ªát c·ªßa b·∫°n kh√¥ng h·ªó tr·ª£ nh·∫≠n d·∫°ng gi·ªçng n√≥i. Vui l√≤ng s·ª≠ d·ª•ng Chrome ho·∫∑c Edge.")
      }
    }

    // Cleanup function
    return () => {
      if (recognitionRef.current) {
        recognitionRef.current.onend = null
        if (isListening) {
          recognitionRef.current.stop()
        }
      }

      if (silenceTimeout) {
        clearTimeout(silenceTimeout);
      }
    }
  }, [recognitionLang]) // Reinitialize when language changes

  // Simple noise filtering function
  const filterNoise = (text: string): string => {
    // Trim whitespace
    let result = text.trim()

    // Remove common noise/filler patterns
    const noisePatterns = [
      /^(uh|um|er|hmm|like) /i,
      / (uh|um|er|hmm|like) /i,
      /(\s)\s+/g, // Remove extra spaces
      /^(hey|ok|okay) (siri|google|alexa|cortana)/i, // Remove assistant triggers
    ]

    noisePatterns.forEach(pattern => {
      result = result.replace(pattern, '$1')
    })

    return result
  }

  // ƒê·∫∑t ng√¥n ng·ªØ nh·∫≠n d·∫°ng gi·ªçng n√≥i
  const setRecognitionLanguage = (lang: string) => {
    console.log(`Changing recognition language to: ${lang}`);
    setRecognitionLang(lang);

    // N·∫øu ƒëang ghi √¢m, c·∫ßn kh·ªüi ƒë·ªông l·∫°i ƒë·ªÉ √°p d·ª•ng ng√¥n ng·ªØ m·ªõi
    if (recognitionRef.current && isListening) {
      try {
        recognitionRef.current.stop();
        // Sau khi d·ª´ng, onend s·∫Ω ƒë∆∞·ª£c g·ªçi v√† isListening s·∫Ω th√†nh false
        // Ch·ªù m·ªôt ch√∫t ƒë·ªÉ ƒë·∫£m b·∫£o qu√° tr√¨nh d·ª´ng ho√†n t·∫•t
        setTimeout(() => {
          if (recognitionRef.current) {
            recognitionRef.current.lang = lang;
            recognitionRef.current.start();
            setIsListening(true);
          }
        }, 300);
      } catch (e) {
        console.error("Error restarting recognition with new language", e);
      }
    } else if (recognitionRef.current) {
      // N·∫øu kh√¥ng ƒëang ghi √¢m, ch·ªâ c·∫ßn c·∫≠p nh·∫≠t thu·ªôc t√≠nh
      recognitionRef.current.lang = lang;
    }
  };

  // Function to toggle speech recognition
  const toggleListening = async () => {
    if (!recognitionRef.current) {
      setRecognitionError("Nh·∫≠n d·∫°ng gi·ªçng n√≥i kh√¥ng ƒë∆∞·ª£c h·ªó tr·ª£ ho·∫∑c ch∆∞a s·∫µn s√†ng")
      return
    }

    if (isListening) {
      // D·ª´ng nh·∫≠n d·∫°ng
      console.log("Stopping speech recognition");
      recognitionRef.current.stop()
      if (silenceTimeout) {
        clearTimeout(silenceTimeout)
        setSilenceTimeout(null)
      }
    } else {
      // Ki·ªÉm tra microphone tr∆∞·ªõc khi b·∫Øt ƒë·∫ßu
      const micOk = await checkMicrophone();
      if (!micOk) {
        return; // checkMicrophone ƒë√£ ƒë·∫∑t th√¥ng b√°o l·ªói
      }

      // X√≥a l·ªói c≈©
      setRecognitionError(null)
      // X√≥a transcript t·∫°m th·ªùi
      setInterimTranscript('')

      // Kh√¥ng reset transcript ho·∫∑c n·ªôi dung input
      // Cho ph√©p ng∆∞·ªùi d√πng t√≠ch l≈©y vƒÉn b·∫£n qua nhi·ªÅu phi√™n ghi √¢m
      // ƒêi·ªÅu n√†y cho ph√©p t·∫°m d·ª´ng v√† ti·∫øp t·ª•c

      try {
        // C·∫≠p nh·∫≠t ng√¥n ng·ªØ m·ªõi nh·∫•t
        recognitionRef.current.lang = recognitionLang;
        console.log(`Starting speech recognition with language: ${recognitionLang}`);

        // Hi·ªÉn th·ªã th√¥ng b√°o h∆∞·ªõng d·∫´n
        setRecognitionNotification(`ƒêang l·∫Øng nghe b·∫±ng ${
          supportedLanguages.find(lang => lang.code === recognitionLang)?.name || recognitionLang
        }`);
        setTimeout(() => setRecognitionNotification(null), 3000);

        // B·∫Øt ƒë·∫ßu nh·∫≠n d·∫°ng
        recognitionRef.current.start()
      } catch (e) {
        console.error("Error starting speech recognition", e)
        setRecognitionError("L·ªói khi b·∫Øt ƒë·∫ßu nh·∫≠n d·∫°ng gi·ªçng n√≥i. Vui l√≤ng th·ª≠ l·∫°i.")
      }
    }
  }

  // Update recognition language when selected language changes
  useEffect(() => {
    if (recognitionRef.current) {
      recognitionRef.current.lang = recognitionLang
    }
  }, [recognitionLang])

  // When detected language changes, update recognition language to match
  useEffect(() => {
    if (lastDetectedLanguage && lastDetectedLanguage !== 'auto') {
      setRecognitionLang(lastDetectedLanguage)
    }
  }, [lastDetectedLanguage])

  // Translation languages - simplified list for translation
  const translationLanguages = [
    { code: "auto", name: "T·ª± ƒë·ªông ph√°t hi·ªán", flag: "üîç" },
    { code: "vi", name: "Ti·∫øng Vi·ªát", flag: "üáªüá≥" },
    { code: "en", name: "English", flag: "üá∫üá∏" },
    { code: "zh", name: "‰∏≠Êñá", flag: "üá®üá≥" },
    { code: "ja", name: "Êó•Êú¨Ë™û", flag: "üáØüáµ" },
    { code: "ko", name: "ÌïúÍµ≠Ïñ¥", flag: "üá∞üá∑" },
    { code: "fr", name: "Fran√ßais", flag: "üá´üá∑" },
    { code: "de", name: "Deutsch", flag: "üá©üá™" },
    { code: "es", name: "Espa√±ol", flag: "üá™üá∏" },
    { code: "it", name: "Italiano", flag: "üáÆüáπ" },
    { code: "pt", name: "Portugu√™s", flag: "üáßüá∑" },
    { code: "ru", name: "–†—É—Å—Å–∫–∏–π", flag: "üá∑üá∫" },
    { code: "ar", name: "ÿßŸÑÿπÿ±ÿ®Ÿäÿ©", flag: "üá∏üá¶" },
    { code: "hi", name: "‡§π‡§ø‡§®‡•ç‡§¶‡•Ä", flag: "üáÆüá≥" },
    { code: "th", name: "‡πÑ‡∏ó‡∏¢", flag: "üáπüá≠" },
    { code: "id", name: "Bahasa Indonesia", flag: "üáÆüá©" },
    { code: "ms", name: "Bahasa Melayu", flag: "üá≤üáæ" },
    { code: "tr", name: "T√ºrk√ße", flag: "üáπüá∑" },
    { code: "pl", name: "Polski", flag: "üáµüá±" },
    { code: "nl", name: "Nederlands", flag: "üá≥üá±" },
  ];

  // Supported languages - expanded list with optimal voice settings
  const supportedLanguages = [
    {
      code: "vi-VN",
      name: "Ti·∫øng Vi·ªát",
      flag: "üáªüá≥",
      recommended: ["Microsoft HoaiMy Online", "Microsoft NamMinh Online"],
      optimalSettings: { rate: 0.95, pitch: 1.05, volume: 1.0 }
    },
    {
      code: "en-US",
      name: "English (US)",
      flag: "üá∫üá∏",
      recommended: ["Microsoft Guy Online", "Microsoft Jenny Online", "Microsoft Aria Online"],
      optimalSettings: { rate: 0.9, pitch: 1.0, volume: 1.0 }
    },
    {
      code: "en-GB",
      name: "English (UK)",
      flag: "üá¨üáß",
      recommended: ["Microsoft Mark", "Microsoft Sonia"],
      optimalSettings: { rate: 0.85, pitch: 0.95, volume: 1.0 }
    },
    {
      code: "fr-FR",
      name: "Fran√ßais",
      flag: "üá´üá∑",
      recommended: ["Microsoft Julie", "Google fran√ßais"],
      optimalSettings: { rate: 0.85, pitch: 1.05, volume: 1.0 }
    },
    {
      code: "de-DE",
      name: "Deutsch",
      flag: "üá©üá™",
      recommended: ["Microsoft Hedda", "Microsoft Stefan"],
      optimalSettings: { rate: 0.85, pitch: 0.95, volume: 1.0 }
    },
    {
      code: "es-ES",
      name: "Espa√±ol",
      flag: "üá™üá∏",
      recommended: ["Microsoft Lucia", "Microsoft Pablo"],
      optimalSettings: { rate: 0.9, pitch: 1.0, volume: 1.0 }
    },
    {
      code: "it-IT",
      name: "Italiano",
      flag: "üáÆüáπ",
      recommended: ["Microsoft Elsa", "Microsoft Diego"],
      optimalSettings: { rate: 0.9, pitch: 1.0, volume: 1.0 }
    },
    {
      code: "pt-BR",
      name: "Portugu√™s",
      flag: "üáßüá∑",
      recommended: ["Microsoft Maria", "Microsoft Daniel"],
      optimalSettings: { rate: 0.9, pitch: 1.0, volume: 1.0 }
    },
    {
      code: "ru-RU",
      name: "–†—É—Å—Å–∫–∏–π",
      flag: "üá∑üá∫",
      recommended: ["Microsoft Irina", "Microsoft Pavel"],
      optimalSettings: { rate: 0.9, pitch: 0.95, volume: 1.0 }
    },
    {
      code: "ja-JP",
      name: "Êó•Êú¨Ë™û",
      flag: "üáØüáµ",
      recommended: ["Microsoft Nanami", "Microsoft Keita"],
      optimalSettings: { rate: 0.8, pitch: 1.1, volume: 1.0 }
    },
    {
      code: "ko-KR",
      name: "ÌïúÍµ≠Ïñ¥",
      flag: "üá∞üá∑",
      recommended: ["Microsoft SunHi", "Microsoft InJoon"],
      optimalSettings: { rate: 0.8, pitch: 1.1, volume: 1.0 }
    },
    {
      code: "zh-CN",
      name: "‰∏≠Êñá (ÁÆÄ‰Ωì)",
      flag: "üá®üá≥",
      recommended: ["Microsoft Yaoyao", "Microsoft Kangkang"],
      optimalSettings: { rate: 0.85, pitch: 1.1, volume: 1.0 }
    },
    {
      code: "zh-TW",
      name: "‰∏≠Êñá (ÁπÅÈ´î)",
      flag: "üáπüáº",
      recommended: ["Microsoft Zhiwei", "Microsoft Yating"],
      optimalSettings: { rate: 0.85, pitch: 1.1, volume: 1.0 }
    },
    {
      code: "th-TH",
      name: "‡πÑ‡∏ó‡∏¢",
      flag: "üáπüá≠",
      recommended: ["Microsoft Pattara"],
      optimalSettings: { rate: 0.85, pitch: 1.05, volume: 1.0 }
    },
    {
      code: "hi-IN",
      name: "‡§π‡§ø‡§®‡•ç‡§¶‡•Ä",
      flag: "üáÆüá≥",
      recommended: ["Microsoft Swara", "Microsoft Ravi"],
      optimalSettings: { rate: 0.85, pitch: 1.0, volume: 1.0 }
    },
    {
      code: "ar-SA",
      name: "ÿßŸÑÿπÿ±ÿ®Ÿäÿ©",
      flag: "üá∏üá¶",
      recommended: ["Microsoft Naayf", "Microsoft Hamed"],
      optimalSettings: { rate: 0.8, pitch: 1.0, volume: 1.0 }
    },
    {
      code: "he-IL",
      name: "◊¢◊ë◊®◊ô◊™",
      flag: "üáÆüá±",
      recommended: ["Microsoft Asaf"],
      optimalSettings: { rate: 0.8, pitch: 1.0, volume: 1.0 }
    },
    {
      code: "pl-PL",
      name: "Polski",
      flag: "üáµüá±",
      recommended: ["Microsoft Paulina"],
      optimalSettings: { rate: 0.9, pitch: 1.0, volume: 1.0 }
    },
    {
      code: "nl-NL",
      name: "Nederlands",
      flag: "üá≥üá±",
      recommended: ["Microsoft Frank"],
      optimalSettings: { rate: 0.9, pitch: 0.95, volume: 1.0 }
    },
    {
      code: "tr-TR",
      name: "T√ºrk√ße",
      flag: "üáπüá∑",
      recommended: ["Microsoft Tolga"],
      optimalSettings: { rate: 0.9, pitch: 1.0, volume: 1.0 }
    },
    {
      code: "sv-SE",
      name: "Svenska",
      flag: "üá∏üá™",
      recommended: ["Microsoft Hedvig"],
      optimalSettings: { rate: 0.85, pitch: 0.95, volume: 1.0 }
    },
    {
      code: "el-GR",
      name: "ŒïŒªŒªŒ∑ŒΩŒπŒ∫Œ¨",
      flag: "üá¨üá∑",
      recommended: ["Microsoft Stefanos"],
      optimalSettings: { rate: 0.85, pitch: 1.0, volume: 1.0 }
    },
    {
      code: "fa-IR",
      name: "ŸÅÿßÿ±ÿ≥€å",
      flag: "üáÆüá∑",
      recommended: [],
      optimalSettings: { rate: 0.8, pitch: 1.0, volume: 1.0 }
    },
    {
      code: "ur-PK",
      name: "ÿßÿ±ÿØŸà",
      flag: "üáµüá∞",
      recommended: [],
      optimalSettings: { rate: 0.8, pitch: 0.95, volume: 1.0 }
    },
    {
      code: "id-ID",
      name: "Bahasa Indonesia",
      flag: "üáÆüá©",
      recommended: ["Microsoft Gadis", "Microsoft Andika"],
      optimalSettings: { rate: 0.9, pitch: 1.0, volume: 1.0 }
    },
    {
      code: "ms-MY",
      name: "Bahasa Melayu",
      flag: "üá≤üáæ",
      recommended: ["Microsoft Rizwan"],
      optimalSettings: { rate: 0.9, pitch: 1.0, volume: 1.0 }
    },
    {
      code: "bn-BD",
      name: "‡¶¨‡¶æ‡¶Ç‡¶≤‡¶æ",
      flag: "üáßüá©",
      recommended: [],
      optimalSettings: { rate: 0.85, pitch: 1.0, volume: 1.0 }
    },
    {
      code: "ta-IN",
      name: "‡Æ§‡ÆÆ‡Æø‡Æ¥‡Øç",
      flag: "üáÆüá≥",
      recommended: [],
      optimalSettings: { rate: 0.85, pitch: 1.05, volume: 1.0 }
    },
    {
      code: "tl-PH",
      name: "Filipino",
      flag: "üáµüá≠",
      recommended: [],
      optimalSettings: { rate: 0.9, pitch: 1.0, volume: 1.0 }
    },
    {
      code: "auto",
      name: "Auto Detect",
      flag: "üîç",
      recommended: [],
      optimalSettings: { rate: 0.9, pitch: 1.0, volume: 1.0 }
    },
  ]

  // Function to auto detect language using advanced scoring system
  const detectLanguage = (text: string): string => {
    if (!text || text.trim().length < 3) {
      return "auto"; // Not enough text to detect language
    }

    // Normalize text - lowercase and trim
    const textToAnalyze = text.toLowerCase().trim();

    // Debug log
    console.log("üîç Detecting language for text:", textToAnalyze.substring(0, 100));

    // Check for different language scripts and character sets first - Most reliable

    // Hebrew - Hebrew characters
    if (/[\u0590-\u05FF\uFB1D-\uFB4F]/.test(textToAnalyze)) {
      console.log("‚úÖ Detected Hebrew by script");
      return "he-IL";
    }

    // Russian and other Cyrillic script languages
    if (/[\u0400-\u04FF]/.test(textToAnalyze)) {
      console.log("‚úÖ Detected Russian/Cyrillic by script");
      return "ru-RU";
    }

    // Thai script
    if (/[\u0E00-\u0E7F]/.test(textToAnalyze)) {
      console.log("‚úÖ Detected Thai by script");
      return "th-TH";
    }

    // Arabic script languages
    if (/[\u0600-\u06FF\u0750-\u077F\u08A0-\u08FF\uFB50-\uFDFF\uFE70-\uFEFF]/.test(textToAnalyze)) {
      // Distinguish between Arabic, Farsi/Persian, and Urdu based on specific characters
      if (/[\u067E\u0686\u0698\u06AF\u06CC\u06F0-\u06F9]/.test(textToAnalyze) || /\b(ÿßÿ≥ÿ™|ŸÅÿßÿ±ÿ≥€å|ÿß€åÿ±ÿßŸÜ)\b/.test(textToAnalyze)) {
        console.log("‚úÖ Detected Persian/Farsi by script");
        return "fa-IR"; // Persian/Farsi
      }
      if (/[\u0679\u0688\u0691\u06BA\u06BE\u06C1-\u06C3\u06D2]/.test(textToAnalyze) || /\b(ÿßŸàÿ±|€Å€í|⁄©€í|ŸÖ€å⁄∫|Ÿæÿß⁄©ÿ≥ÿ™ÿßŸÜ)\b/.test(textToAnalyze)) {
        console.log("‚úÖ Detected Urdu by script");
        return "ur-PK"; // Urdu
      }
      console.log("‚úÖ Detected Arabic by script");
      return "ar-SA"; // Default to Arabic
    }

    // East Asian languages - Check for Japanese, Chinese, Korean
    if (/[\u3040-\u30ff\u3400-\u4dbf\u4e00-\u9fff\uf900-\ufaff\uff66-\uff9f\uac00-\ud7af]/.test(textToAnalyze)) {
      // Japanese specific kana characters (hiragana & katakana)
      if (/[\u3040-\u309F\u30A0-\u30FF]/.test(textToAnalyze)) {
        console.log("‚úÖ Detected Japanese by script");
        return "ja-JP";
      }

      // Korean Hangul
      if (/[\uAC00-\uD7AF\u1100-\u11FF\u3130-\u318F\uA960-\uA97F\uD7B0-\uD7FF]/.test(textToAnalyze)) {
        console.log("‚úÖ Detected Korean by script");
        return "ko-KR";
      }

      // Chinese - try to distinguish between Traditional and Simplified
      if (/[\u4e00-\u9fff\uf900-\ufaff]/.test(textToAnalyze)) {
        // Characters that differ between Simplified and Traditional
        if (/[ÂõΩËßÅËØùËØ¥ÂØπ‰ª¨ËøòËÆ∞Ê≤°Ëøô‰∫ãÊ†∑ÁªèÈ∫Ω]/.test(textToAnalyze)) {
          console.log("‚úÖ Detected Simplified Chinese by script");
          return "zh-CN"; // Simplified
        }
        if (/[ÂúãË¶ãË©±Ë™™Â∞çÂÄëÈÇÑË®òÊ≤íÈÄô‰∫ãÊ®£Á∂ìÈ∫Ω]/.test(textToAnalyze)) {
          console.log("‚úÖ Detected Traditional Chinese by script");
          return "zh-TW"; // Traditional
        }
        // Default to Simplified Chinese if can't distinguish
        console.log("‚úÖ Detected Chinese (default Simplified) by script");
        return "zh-CN";
      }
    }

    // Hindi and other Devanagari script languages
    if (/[\u0900-\u097F]/.test(textToAnalyze)) {
      console.log("‚úÖ Detected Hindi by script");
      return "hi-IN";
    }

    // Bengali
    if (/[\u0980-\u09FF]/.test(textToAnalyze)) {
      console.log("‚úÖ Detected Bengali by script");
      return "bn-BD";
    }

    // Tamil
    if (/[\u0B80-\u0BFF]/.test(textToAnalyze)) {
      console.log("‚úÖ Detected Tamil by script");
      return "ta-IN";
    }

    // Greek
    if (/[\u0370-\u03FF\u1F00-\u1FFF]/.test(textToAnalyze)) {
      console.log("‚úÖ Detected Greek by script");
      return "el-GR";
    }

    // For Latin script languages, use advanced scoring system
    const scores: Record<string, number> = {
      'fr-FR': 0,
      'es-ES': 0,
      'it-IT': 0,
      'pt-BR': 0,
      'de-DE': 0,
      'en-US': 0,
      'vi-VN': 0,
      'id-ID': 0,
      'ms-MY': 0,
      'pl-PL': 0,
      'nl-NL': 0,
      'sv-SE': 0,
      'tr-TR': 0,
      'tl-PH': 0  // Filipino/Tagalog
    };

    // Filipino/Tagalog scoring - add before other languages to avoid confusion with Vietnamese
    if (/\b(ang|ng|sa|na|ay|mga|ako|ka|siya|kami|kayo|sila|ito|iyan|iyon|filipino|pilipinas|tagalog)\b/.test(textToAnalyze)) scores['tl-PH'] += 5;
    if (/\b(kumusta|salamat|oo|hindi|paano|saan|kailan|sino|ano|bakit)\b/.test(textToAnalyze)) scores['tl-PH'] += 4;
    if (/\b(maganda|mabuti|masaya|malaki|maliit|marami|konti|lahat|wala)\b/.test(textToAnalyze)) scores['tl-PH'] += 3;

    // French scoring - very specific patterns with penalty system
    let frenchScore = 0;
    if (/[√†√¢√ß√©√®√™√´√Æ√Ø√¥√π√ª√º√ø≈ì√¶]/.test(textToAnalyze)) frenchScore += 3;
    if (/\b(le|la|les|un|une|des|du|de|et|est|sont|avec|pour|dans|sur|pas|cette|avoir|√™tre)\b/.test(textToAnalyze)) frenchScore += 2;
    if (/\b(bonjour|bonsoir|merci|oui|non|comment|pourquoi|quand|o√π|qui|que|fran√ßais|france)\b/.test(textToAnalyze)) frenchScore += 5;
    if (/\b(c'est|n'est|qu'il|qu'elle|d'un|d'une|l'on|j'ai|tu|nous|vous|ils|elles)\b/.test(textToAnalyze)) frenchScore += 4;
    if (/\b(tr√®s|bien|alors|donc|voil√†|√ßa|maintenant|toujours|jamais)\b/.test(textToAnalyze)) frenchScore += 3;
    // Strong penalty if Italian patterns are found
    if (/\b(sono|√®|gli|della|delle|degli|zione|zioni|ciao|grazie|buon)\b/.test(textToAnalyze)) frenchScore -= 3;
    scores['fr-FR'] = Math.max(0, frenchScore);

    // Spanish scoring - unique patterns
    if (/[√±√°√©√≠√≥√∫√º¬ø¬°]/.test(textToAnalyze)) scores['es-ES'] += 4;
    if (/\b(el|la|los|las|es|son|est√°|est√°n|de|que|en|un|una|por|para|con|como|pero)\b/.test(textToAnalyze)) scores['es-ES'] += 2;
    if (/\b(hola|gracias|buenos|d√≠as|noches|se√±or|se√±ora|muchas|favor|espa√±ol|espa√±a)\b/.test(textToAnalyze)) scores['es-ES'] += 4;
    if (/¬ø.*?\?|¬°.*?!/.test(textToAnalyze)) scores['es-ES'] += 5; // Spanish punctuation

    // Italian scoring - more distinctive patterns with penalty system
    let italianScore = 0;
    if (/[√†√®√©√¨√≠√Æ√≤√≥√π√∫]/.test(textToAnalyze)) italianScore += 3;
    if (/\b(di|che|non|per|in|con|sono|sei|√®|siamo|mi|ti|ci|della|delle|degli|anche|molto)\b/.test(textToAnalyze)) italianScore += 3;
    if (/\b(ciao|grazie|buongiorno|buonasera|prego|scusi|come|stai|dove|quando|perch√©|italiano|italia)\b/.test(textToAnalyze)) italianScore += 6;
    if (/\b(gli|glie|zione|zioni|mente)\b/.test(textToAnalyze)) italianScore += 5;
    if (/\b(bene|bello|bella|tutto|tutti|sempre|mai|gi√†|ancora|proprio)\b/.test(textToAnalyze)) italianScore += 4;
    if (/\b(sono|√®)\b/.test(textToAnalyze)) italianScore += 4; // Very Italian-specific
    // Strong penalty if French patterns are found
    if (/\b(c'est|n'est|qu'il|qu'elle|d'un|d'une|tr√®s|alors|donc|voil√†|√ßa|bonjour|merci)\b/.test(textToAnalyze)) italianScore -= 3;
    // Strong penalty if English patterns are found
    if (/\b(the|and|is|that|you|with|this|will|can|would|could|should|I'm|you're|he's|she's|it's|don't|won't|can't)\b/.test(textToAnalyze)) italianScore -= 3;
    if (/\b(english|hello|thank|please|welcome|good|morning|evening|night|yes|no|what|when|where|why|how)\b/.test(textToAnalyze)) italianScore -= 4;
    scores['it-IT'] = Math.max(0, italianScore);

    // Portuguese scoring - unique features
    if (/[√£√µ√ß√°√©√≠√≥√∫√¢√™√¥√†]/.test(textToAnalyze)) scores['pt-BR'] += 3;
    if (/\b(de|que|e|o|da|em|um|uma|para|com|n√£o|por|os|as|s√£o|voc√™|este|esta)\b/.test(textToAnalyze)) scores['pt-BR'] += 2;
    if (/\b(ol√°|obrigad[oa]|tudo|muito|portugu√™s|brasil|portugal|como|est√°|onde|quando|porque)\b/.test(textToAnalyze)) scores['pt-BR'] += 4;
    if (/\b(√ß√£o|√ß√µes|√£o|√µes|mente)\b/.test(textToAnalyze)) scores['pt-BR'] += 3;

    // German scoring - distinctive features
    if (/[√§√∂√º√ü]/.test(textToAnalyze)) scores['de-DE'] += 5;
    if (/\b(und|ist|das|ich|nicht|der|die|zu|den|mit|von|auf|f√ºr|werden|haben|sein)\b/.test(textToAnalyze)) scores['de-DE'] += 2;
    if (/\b(aber|oder|wenn|dann|auch|nur|noch|schon|sehr|gut|deutsch|deutschland)\b/.test(textToAnalyze)) scores['de-DE'] += 3;
    if (/\b(eine[nr]?|einem|eines)\b/.test(textToAnalyze)) scores['de-DE'] += 2;

    // English scoring - more distinctive patterns with penalty system
    let englishScore = 0;
    if (/\b(the|and|is|in|to|have|that|for|you|with|on|at|as|are|this|will|can|would|could|should)\b/.test(textToAnalyze)) englishScore += 2; // Increased from 1
    if (/\b(english|hello|thank|please|welcome|good|morning|evening|night|yes|no|what|when|where|why|how)\b/.test(textToAnalyze)) englishScore += 4; // Increased from 3
    if (/\b(about|because|before|after|through|during|without|between|against|under|over|above|below)\b/.test(textToAnalyze)) englishScore += 3; // English prepositions
    if (/\b(something|anything|everything|nothing|someone|anyone|everyone|nobody)\b/.test(textToAnalyze)) englishScore += 4; // English compound words
    if (/\b(I'm|you're|he's|she's|it's|we're|they're|don't|won't|can't|shouldn't|wouldn't)\b/.test(textToAnalyze)) englishScore += 5; // English contractions
    // Penalty if Italian patterns are found
    if (/\b(sono|√®|gli|della|delle|degli|zione|zioni|ciao|grazie|buon|molto|anche|dove|quando|perch√©)\b/.test(textToAnalyze)) englishScore -= 3;
    // Penalty if other Romance language patterns are found
    if (/\b(c'est|tr√®s|alors|donc|bonjour|merci|hola|gracias|espa√±ol|ol√°|obrigado|portugu√™s)\b/.test(textToAnalyze)) englishScore -= 2;
    scores['en-US'] = Math.max(0, englishScore);

    // Vietnamese scoring - specific diacritics and words
    if (/[√†√°·∫°·∫£√£√¢·∫ß·∫•·∫≠·∫©·∫´ƒÉ·∫±·∫Ø·∫∑·∫≥·∫µ√®√©·∫π·∫ª·∫Ω√™·ªÅ·∫ø·ªá·ªÉ·ªÖ√¨√≠·ªã·ªâƒ©√≤√≥·ªç·ªè√µ√¥·ªì·ªë·ªô·ªï·ªó∆°·ªù·ªõ·ª£·ªü·ª°√π√∫·ª•·ªß≈©∆∞·ª´·ª©·ª±·ª≠·ªØ·ª≥√Ω·ªµ·ª∑·ªπƒë]/.test(textToAnalyze)) scores['vi-VN'] += 4;
    if (/\b(l√†|c·ªßa|v√†|c√≥|ƒë∆∞·ª£c|n√†y|ƒë√≥|cho|v·ªõi|t·ª´|trong|v·ªÅ|m·ªôt|c√°c|nh·ªØng|ng∆∞·ªùi|vi·ªát|nam|ti·∫øng)\b/.test(textToAnalyze)) scores['vi-VN'] += 3;

    // Indonesian vs Malay - improved distinction
    if (/\b(dan|yang|di|itu|dengan|untuk|tidak|ini|dari|dalam|akan)\b/.test(textToAnalyze)) {
      // Indonesian specific
      if (/\b(adalah|sudah|belum|sedang|bisa|juga|hanya|sangat|sekali|indonesia|bahasa indonesia)\b/.test(textToAnalyze)) scores['id-ID'] += 4;
      if (/\b(ter[a-z]+|ber[a-z]+|me[a-z]+|pe[a-z]+an)\b/.test(textToAnalyze)) scores['id-ID'] += 2;

      // Malay specific
      if (/\b(boleh|hendak|mahu|nak|pula|amat|malaysia|bahasa malaysia|bahasa melayu)\b/.test(textToAnalyze)) scores['ms-MY'] += 4;
      if (/\b(anda|awak)\b/.test(textToAnalyze)) scores['ms-MY'] += 2;

      // Common words get lower scores
      if (/\b(saya|kamu|mereka|kami)\b/.test(textToAnalyze)) {
        scores['id-ID'] += 1;
        scores['ms-MY'] += 1;
      }
    }

    // Polish scoring
    if (/[ƒÖƒáƒô≈Ç≈Ñ√≥≈õ≈∫≈º]/.test(textToAnalyze)) scores['pl-PL'] += 4;
    if (/\b(jest|nie|to|siƒô|na|i|w|z|do|sƒÖ|co|jak|polski|polska)\b/.test(textToAnalyze)) scores['pl-PL'] += 3;

    // Dutch scoring
    if (/\b(het|een|dat|niet|en|de|van|in|op|te|zijn|nederlands|nederland)\b/.test(textToAnalyze)) scores['nl-NL'] += 2;
    if (/\b(geen|deze|die|veel|voor|maar|wel|ook|nog|naar)\b/.test(textToAnalyze)) scores['nl-NL'] += 3;
    if (/[ij]/.test(textToAnalyze) && /\b(ij|zijn|mijn|zijn)\b/.test(textToAnalyze)) scores['nl-NL'] += 2;

    // Swedish scoring
    if (/[√•√§√∂]/.test(textToAnalyze)) scores['sv-SE'] += 4;
    if (/\b(och|att|det|som|en|√§r|p√•|f√∂r|med|jag|har|inte|svenska|sverige)\b/.test(textToAnalyze)) scores['sv-SE'] += 3;

    // Turkish scoring
    if (/[√ßƒüƒ±√∂≈ü√º]/.test(textToAnalyze)) scores['tr-TR'] += 4;
    if (/\b(bir|bu|ve|i√ßin|ile|ben|sen|o|biz|siz|onlar|t√ºrk√ße|t√ºrkiye)\b/.test(textToAnalyze)) scores['tr-TR'] += 3;

    // Find the language with highest score
    const maxScore = Math.max(...Object.values(scores));
    const detectedLangs = Object.entries(scores).filter(([_, score]) => score === maxScore && score > 0);

    console.log("üìä Language scores:", scores);
    console.log("üèÜ Max score:", maxScore, "Languages:", detectedLangs.map(([lang]) => lang));

    if (detectedLangs.length === 1 && maxScore >= 2) {
      const detectedLang = detectedLangs[0][0];
      console.log(`‚úÖ Detected ${detectedLang} with confidence score: ${maxScore}`);
      return detectedLang;
    } else if (detectedLangs.length > 1) {
      console.log(`‚ö†Ô∏è Multiple languages detected with same score (${maxScore}):`, detectedLangs.map(([lang]) => lang));
      // Return the first one, but this indicates ambiguous text
      return detectedLangs[0][0];
    } else {
      console.log("‚ùå No language detected with sufficient confidence, returning auto");
      return "auto";
    }
  };



  // Load available voices when component mounts or when browser updates them
  useEffect(() => {
    if (!synth) return

    // Function to load and set available voices
    const loadVoices = () => {
      const voices = synth.getVoices()
      setAvailableVoices(voices)

      // Debug: Log all available voices grouped by language
      console.log("=== AVAILABLE VOICES BY LANGUAGE ===");
      const voicesByLang = voices.reduce((acc, voice) => {
        const lang = voice.lang;
        if (!acc[lang]) acc[lang] = [];
        acc[lang].push(voice.name);
        return acc;
      }, {} as Record<string, string[]>);

      Object.keys(voicesByLang).sort().forEach(lang => {
        console.log(`${lang}: ${voicesByLang[lang].join(', ')}`);
      });
      console.log("=====================================");

      // Set default voice if not already set
      if (!selectedVoice && voices.length > 0) {
        // Try to find a Vietnamese voice by default, or fall back to the first voice
        const viVoice = voices.find(voice => voice.lang.includes('vi-VN'))
        setSelectedVoice(viVoice?.name || voices[0].name)
      }
    }

    // Load voices immediately in case they're already available
    loadVoices()

    // Chrome loads voices asynchronously, so we need this event listener
    if (window.speechSynthesis.onvoiceschanged !== undefined) {
      window.speechSynthesis.onvoiceschanged = loadVoices
    }

    return () => {
      if (window.speechSynthesis.onvoiceschanged !== undefined) {
        window.speechSynthesis.onvoiceschanged = null
      }
    }
  }, [synth, selectedVoice])

  // Function to find best matching voice for a language
  const getBestVoiceForLanguage = (langCode: string): string | undefined => {
    if (!availableVoices.length) return undefined;

    const language = supportedLanguages.find(lang => lang.code === langCode);
    if (!language) return undefined;

    // First try to find one of the recommended voices
    if (language.recommended?.length) {
      for (const recommendedVoice of language.recommended) {
        // ∆Øu ti√™n c√°c gi·ªçng n√≥i "neural" ho·∫∑c "online" ch·∫•t l∆∞·ª£ng cao
        const voice = availableVoices.find(v => v.name === recommendedVoice);
        if (voice) return voice.name;
      }
    }

    // Look for voices matching the language code
    const matchingVoices = availableVoices.filter(v => v.lang.includes(langCode.split('-')[0]));

    // Prefer high-quality natural voices (sorted by priority)
    // 1. Neural/natural voices specifically named
    // 2. Online voices (typically higher quality)
    // 3. Non-local voices (typically Wavenet or cloud-based)
    // 4. Any voice for the language

    // 1. Check for Neural/natural voices first
    const neuralVoice = matchingVoices.find(v =>
      v.name.toLowerCase().includes('neural') ||
      v.name.toLowerCase().includes('natural') ||
      v.name.toLowerCase().includes('wavenet')
    );
    if (neuralVoice) return neuralVoice.name;

    // 2. Check for online voices
    const onlineVoice = matchingVoices.find(v =>
      v.name.toLowerCase().includes('online')
    );
    if (onlineVoice) return onlineVoice.name;

    // 3. Prefer non-local voices
    const cloudVoice = matchingVoices.find(v => !v.localService);
    if (cloudVoice) return cloudVoice.name;

    // 4. Fall back to any voice for that language
    return matchingVoices.length > 0 ? matchingVoices[0].name : undefined;
  };

  // Function to speak text
  const speakText = (text: string) => {
    if (!synth || !isSpeechEnabled || !text.trim()) return

    // Clean text from HTML tags and markdown
    const cleanText = text.replace(/<[^>]*>?/gm, '').replace(/\[([^\]]+)\]\([^)]+\)/gm, '$1')

    // Determine language to use - always auto-detect for AI responses to ensure proper pronunciation
    const detectedLang = detectLanguage(cleanText);

    // If detection returns "auto", fallback to English for TTS
    const langToUse = detectedLang === "auto" ? "en-US" : detectedLang;

    // Save detected language to state for UI feedback (keep original detection result)
    setLastDetectedLanguage(detectedLang);

    // Get language info and name
    const langInfo = supportedLanguages.find(lang => lang.code === langToUse);
    const langName = langInfo?.name || langToUse;
    const langFlag = langInfo?.flag || 'üîç';

    console.log(`Speaking text in ${langName} (${langToUse}):`, cleanText.substring(0, 50));
    console.log(`Original detection result: ${detectedLang}`);

    // If using Google TTS and we're not in development mode, use that
    if (useGoogleTTS && process.env.NODE_ENV !== 'development' && false) {
      // This would require a server endpoint to call Google TTS API
      // Here we're just using the browser's TTS as a fallback
      console.log("Google TTS would be used in production")
    }

    // Create utterance
    const utterance = new SpeechSynthesisUtterance(cleanText)

    // Apply language code
    utterance.lang = langToUse;

    // Apply user settings - always use user's preferred settings
    utterance.rate = speechRate;
    utterance.pitch = speechPitch;
    utterance.volume = speechVolume;

    // Find best voice for this language
    const bestVoice = getBestVoiceForLanguage(langToUse);
    let selectedVoiceToUse = null;
    let voiceQuality = "Standard";

    if (bestVoice) {
      selectedVoiceToUse = availableVoices.find(v => v.name === bestVoice);
      if (selectedVoiceToUse) {
        voiceQuality = selectedVoiceToUse.localService ? "Standard" : "Premium";
        console.log(`Using voice: ${selectedVoiceToUse.name} (${voiceQuality}) for ${langName}`);
      }
    }

    // If no specific recommended voice is found, try finding any voice for that language
    if (!selectedVoiceToUse) {
      // Try finding any voice that supports this language code (even partially)
      const langCode = langToUse.split('-')[0]; // Get the main language part (e.g. 'ar' from 'ar-SA')
      const fallbackVoices = availableVoices.filter(voice => voice.lang.includes(langCode));

      if (fallbackVoices.length > 0) {
        // Prioritize: 1. Neural/natural voices, 2. Online voices, 3. Non-local voices, 4. Any match
        selectedVoiceToUse = fallbackVoices.find(v =>
          v.name.toLowerCase().includes('neural') ||
          v.name.toLowerCase().includes('natural') ||
          v.name.toLowerCase().includes('wavenet')
        ) || fallbackVoices.find(v =>
          v.name.toLowerCase().includes('online')
        ) || fallbackVoices.find(v => !v.localService) || fallbackVoices[0];

        if (selectedVoiceToUse) {
          voiceQuality = selectedVoiceToUse.localService ? "Standard" : "Premium";
          console.log(`Using fallback voice: ${selectedVoiceToUse.name} (${voiceQuality})`);
        }
      }
    }

    // Ultimate fallback - if no voice found for the language at all, use English as fallback
    if (!selectedVoiceToUse) {
      const englishVoice = getBestVoiceForLanguage("en-US");
      if (englishVoice) {
        selectedVoiceToUse = availableVoices.find(v => v.name === englishVoice);
        console.log(`No voice found for ${langName} - using English voice as fallback`);
      }
    }

    // Set the selected voice
    if (selectedVoiceToUse) {
      utterance.voice = selectedVoiceToUse;
    }

    // Note: User settings are now always respected without language-specific overrides

    // Stop any current speech
    synth.cancel()

    // Speak
    synth.speak(utterance)

    // Always show notification about detected language and voice
    const voiceUsed = utterance.voice?.name || "Default voice";
    const notification = `${langFlag} <b>${langName}</b> - ${voiceUsed} <span class="text-xs text-blue-300">(${voiceQuality})</span>`;

    // Display notification
    setVoiceNotification(notification);
    setShowVoiceNotification(true);

    // Hide notification after 3 seconds
    setTimeout(() => {
      setShowVoiceNotification(false);
    }, 3000);
  }

  // Stop speech when component unmounts
  useEffect(() => {
    return () => {
      if (synth) synth.cancel()
    }
  }, [synth])

  // Function to translate text using Gemini API
  const translateText = async (text: string, fromLang: string = "auto", toLang: string = "en") => {
    if (!text.trim()) return null;

    setIsTranslating(true);
    setTranslationError(null);

    try {
      const fromLangName = translationLanguages.find(lang => lang.code === fromLang)?.name || fromLang;
      const toLangName = translationLanguages.find(lang => lang.code === toLang)?.name || toLang;

      const prompt = fromLang === "auto"
        ? `Translate the following text to ${toLangName}. Only return the translated text, nothing else:\n\n${text}`
        : `Translate the following text from ${fromLangName} to ${toLangName}. Only return the translated text, nothing else:\n\n${text}`;

      const response = await fetch(
        `https://generativelanguage.googleapis.com/v1beta/models/gemini-2.0-flash:generateContent?key=${GEMINI_API_KEY}`,
        {
          method: "POST",
          headers: {
            "Content-Type": "application/json",
          },
          body: JSON.stringify({
            contents: [{
              parts: [{ text: prompt }]
            }]
          }),
        }
      );

      if (!response.ok) {
        throw new Error(`Translation failed with status ${response.status}`);
      }

      const data = await response.json();
      const translatedText = data.candidates?.[0]?.content?.parts?.[0]?.text?.trim();

      if (!translatedText) {
        throw new Error("No translation received");
      }

      setTranslatedText(translatedText);
      return {
        translatedText,
        detectedSourceLanguage: fromLang === "auto" ? "unknown" : fromLang
      };
    } catch (error) {
      console.error("Translation error:", error);
      const errorMessage = error instanceof Error ? error.message : "Translation failed";
      setTranslationError(errorMessage);
      return null;
    } finally {
      setIsTranslating(false);
    }
  };

  // Function to toggle voice settings dialog
  const toggleVoiceSettings = () => {
    setIsVoiceSettingsOpen(!isVoiceSettingsOpen)
  }

  const handleAddMatch = () => {
    setEditingMatch({
      ...newMatchTemplate,
      id: `match-${Date.now()}`,
    })
    setIsDialogOpen(true)
  }

  const handleEditMatch = (match: Match) => {
    setEditingMatch(match)
    setIsDialogOpen(true)
  }

  const handleSaveMatch = () => {
    if (!editingMatch) return

    if (matches.some((match) => match.id === editingMatch.id)) {
      onUpdateMatch(editingMatch)
    } else {
      onAddMatch(editingMatch)
    }

    setIsDialogOpen(false)
    setEditingMatch(null)
  }

  const handleDeleteMatch = (id: string) => {
    setMatchIdToDelete(id)
    setIsDeleteDialogOpen(true)
  }

  const confirmDeleteMatch = () => {
    if (matchIdToDelete) {
      onDeleteMatch(matchIdToDelete)
      setMatchIdToDelete(null)
    }
  }

  const formatDate = (dateString: string) => {
    const date = new Date(dateString)
    return date.toLocaleDateString("vi-VN", {
      weekday: "long",
      year: "numeric",
      month: "long",
      day: "numeric",
    })
  }

  const filteredMatches = matches.filter((match) => {
    if (filter === "all") return true
    if (filter === "upcoming") return !match.completed
    if (filter === "completed") return match.completed
    return true
  })

  // S·∫Øp x·∫øp tr·∫≠n ƒë·∫•u: tr·∫≠n s·∫Øp t·ªõi l√™n ƒë·∫ßu, tr·∫≠n ƒë√£ ho√†n th√†nh xu·ªëng cu·ªëi
  const sortedMatches = [...filteredMatches].sort((a, b) => {
    if (a.completed && !b.completed) return 1
    if (!a.completed && b.completed) return -1
    return new Date(a.date).getTime() - new Date(b.date).getTime()
  })

  // Handle file upload
  const handleFileChange = (e: React.ChangeEvent<HTMLInputElement>) => {
    const file = e.target?.files?.[0];
    if (!file) return;

    // Check if file is an image
    if (!file.type.startsWith('image/')) {
      alert('Vui l√≤ng t·∫£i l√™n t·ªáp h√¨nh ·∫£nh');
      return;
    }

    setImageFile(file);

    // Create a preview URL
    const reader = new FileReader();
    reader.onload = (event) => {
      setUploadedImage(event.target?.result as string);
    };
    reader.readAsDataURL(file);
  };

  const handleRemoveImage = () => {
    setUploadedImage(null);
    setImageFile(null);
    if (fileInputRef.current) {
      fileInputRef.current.value = '';
    }
  };

  // Function to add a reaction to a message
  const addReaction = (messageId: string, emoji: string) => {
    setChatMessages(prevMessages =>
      prevMessages.map(msg => {
        if (msg.id === messageId) {
          const oldReactions = msg.reactions || {};
          const reactions = { ...oldReactions };
          if (reactions[emoji]) {
            // Increment existing reaction count
            reactions[emoji] = {
              ...reactions[emoji],
              count: reactions[emoji].count + 1,
              users: [...reactions[emoji].users, 'current-user'],
              timestamp: Date.now() // Update timestamp for animation
            };
          } else {
            // Add new reaction
            reactions[emoji] = {
              emoji,
              count: 1,
              users: ['current-user'],
              timestamp: Date.now()
            };
          }

          return {
            ...msg,
            reactions
          };
        }
        return msg;
      })
    );

    // Close emoji picker
    setShowingEmojiFor(null);
  };

  // Generate a unique ID for messages
  const generateMessageId = () => `msg-${Date.now()}-${Math.random().toString(36).substr(2, 9)}`;

  // Add a function to help extract match information from natural language
  const extractMatchInfo = (text: string): Partial<Match> => {
    const matchInfo: Partial<Match> = {};

    // Simple pattern matching for common formats
    // Example: "Th√™m tr·∫≠n ƒë·∫•u gi·ªØa Arsenal v√† Chelsea v√†o ng√†y 15/10/2023 l√∫c 19:30 t·∫°i Emirates Stadium trong gi·∫£i Ngo·∫°i h·∫°ng Anh"

    // Extract team names
    const teamPattern = /gi·ªØa\s+([^\s]+(?:\s+[^\s]+)*)\s+(?:v√†|vs|g·∫∑p)\s+([^\s]+(?:\s+[^\s]+)*)/i;
    const teamMatch = text.match(teamPattern);
    if (teamMatch) {
      let homeTeam = teamMatch[1].trim();
      let awayTeam = teamMatch[2].trim();

      // Lo·∫°i b·ªè ph·∫ßn th√¥ng tin ng√†y, th·ªùi gian, ƒë·ªãa ƒëi·ªÉm kh·ªèi t√™n ƒë·ªôi (n·∫øu c√≥)
      const cleanPatterns = [
        /\s+v√†o\s+ng√†y.*/i,
        /\s+ng√†y.*/i,
        /\s+l√∫c.*/i,
        /\s+t·∫°i.*/i,
        /\s+·ªü.*/i,
        /\s+trong.*/i,
        /\s+thu·ªôc.*/i,
      ];

      for (const pattern of cleanPatterns) {
        homeTeam = homeTeam.replace(pattern, '');
        awayTeam = awayTeam.replace(pattern, '');
      }

      matchInfo.homeTeam = homeTeam;
      matchInfo.awayTeam = awayTeam;
    }

    // Extract date (support multiple formats)
    const datePatterns = [
      /ng√†y\s+(\d{1,2})[\/\-](\d{1,2})[\/\-](\d{4})/i, // ng√†y DD/MM/YYYY
      /ng√†y\s+(\d{1,2})[\/\-](\d{1,2})/i, // ng√†y DD/MM (current year)
    ];

    for (const pattern of datePatterns) {
      const dateMatch = text.match(pattern);
      if (dateMatch) {
        if (dateMatch.length === 4) {
          // DD/MM/YYYY format
          const day = dateMatch[1].padStart(2, '0');
          const month = dateMatch[2].padStart(2, '0');
          const year = dateMatch[3];
          matchInfo.date = `${year}-${month}-${day}`;
        } else {
          // DD/MM format (use current year)
          const day = dateMatch[1].padStart(2, '0');
          const month = dateMatch[2].padStart(2, '0');
          const year = new Date().getFullYear();
          matchInfo.date = `${year}-${month}-${day}`;
        }
        break;
      }
    }

    // Extract time
    const timePattern = /(?:l√∫c|gi·ªù)\s+(\d{1,2})[h:](\d{1,2})?/i;
    const timeMatch = text.match(timePattern);
    if (timeMatch) {
      const hours = timeMatch[1].padStart(2, '0');
      const minutes = (timeMatch[2] || "00").padStart(2, '0');
      matchInfo.time = `${hours}:${minutes}`;
    }

    // Extract venue
    const venuePatterns = [
      /(?:t·∫°i|·ªü)\s+([^\.,]+)(?:,|\.|trong)/i,
      /(?:t·∫°i|·ªü)\s+([^\.,]+)$/i,
    ];

    for (const pattern of venuePatterns) {
      const venueMatch = text.match(pattern);
      if (venueMatch) {
        matchInfo.venue = venueMatch[1].trim();
        break;
      }
    }

    // Extract competition
    const competitionPatterns = [
      /(?:trong|thu·ªôc)\s+(?:gi·∫£i|khu√¥n kh·ªï)\s+([^\.,]+)(?:,|\.)/i,
      /(?:trong|thu·ªôc)\s+(?:gi·∫£i|khu√¥n kh·ªï)\s+([^\.,]+)$/i,
      /(?:gi·∫£i|khu√¥n kh·ªï)\s+([^\.,]+)(?:,|\.)/i,
      /(?:gi·∫£i|khu√¥n kh·ªï)\s+([^\.,]+)$/i,
    ];

    for (const pattern of competitionPatterns) {
      const competitionMatch = text.match(pattern);
      if (competitionMatch) {
        matchInfo.competition = competitionMatch[1].trim();
        break;
      }
    }

    // Extract score for home team
    const homeScorePatterns = [
      /(?:ƒë·ªôi nh√†|ƒë·ªôi 1)\s+(?:ghi ƒë∆∞·ª£c|ƒë·∫°t|ghi|th·∫Øng|ƒë∆∞·ª£c)\s+(\d+)(?:\s+b√†n|\s+ƒëi·ªÉm|\s+b√†n th·∫Øng)?/i,
      /(?:t·ªâ s·ªë|t·ª∑ s·ªë|k·∫øt qu·∫£)\s+(\d+)(?:\s*[\-:])\s*\d+/i,
      /(\d+)(?:\s*[\-:])\s*\d+\s+(?:cho|l√† t·ªâ s·ªë c·ªßa|l√† k·∫øt qu·∫£)/i,
    ];

    for (const pattern of homeScorePatterns) {
      const scoreMatch = text.match(pattern);
      if (scoreMatch) {
        matchInfo.homeScore = parseInt(scoreMatch[1], 10);
        // N·∫øu c√≥ ƒëi·ªÉm s·ªë, ƒë√°nh d·∫•u tr·∫≠n ƒë·∫•u ƒë√£ k·∫øt th√∫c
        matchInfo.completed = true;
        break;
      }
    }

    // Extract score for away team
    const awayScorePatterns = [
      /(?:ƒë·ªôi kh√°ch|ƒë·ªôi 2)\s+(?:ghi ƒë∆∞·ª£c|ƒë·∫°t|ghi|th·∫Øng|ƒë∆∞·ª£c)\s+(\d+)(?:\s+b√†n|\s+ƒëi·ªÉm|\s+b√†n th·∫Øng)?/i,
      /(?:t·ªâ s·ªë|t·ª∑ s·ªë|k·∫øt qu·∫£)\s+\d+(?:\s*[\-:])\s*(\d+)/i,
      /\d+(?:\s*[\-:])\s*(\d+)\s+(?:cho|l√† t·ªâ s·ªë c·ªßa|l√† k·∫øt qu·∫£)/i,
    ];

    for (const pattern of awayScorePatterns) {
      const scoreMatch = text.match(pattern);
      if (scoreMatch) {
        matchInfo.awayScore = parseInt(scoreMatch[1], 10);
        // N·∫øu c√≥ ƒëi·ªÉm s·ªë, ƒë√°nh d·∫•u tr·∫≠n ƒë·∫•u ƒë√£ k·∫øt th√∫c
        matchInfo.completed = true;
        break;
      }
    }

    // Extract notes
    const notesPatterns = [
      /ghi ch√∫(?:\s*[:]\s*)["']([^"']+)["']/i,
      /ghi ch√∫(?:\s*[:]\s*)([^.,]+)(?:,|\.|\n|$)/i,
      /ch√∫ th√≠ch(?:\s*[:]\s*)["']([^"']+)["']/i,
      /ch√∫ th√≠ch(?:\s*[:]\s*)([^.,]+)(?:,|\.|\n|$)/i,
    ];

    for (const pattern of notesPatterns) {
      const notesMatch = text.match(pattern);
      if (notesMatch) {
        matchInfo.notes = notesMatch[1].trim();
        break;
      }
    }

    return matchInfo;
  };

  // Parse agent action from AI response
  const parseAgentAction = (aiText: string): { text: string, action: AgentAction } => {
    const actionPattern = /\[ACTION:([^]]+)\]/;
    const match = aiText.match(actionPattern);

    if (!match) {
      return { text: aiText, action: { type: 'NONE' } };
    }

    try {
      const actionJson = match[1].trim();
      const action = JSON.parse(actionJson) as AgentAction;

      // Remove the action part from the text
      const cleanedText = aiText.replace(actionPattern, '').trim();

      return { text: cleanedText, action };
    } catch (e) {
      console.error("Error parsing agent action:", e);
      return { text: aiText, action: { type: 'NONE' } };
    }
  };

  const getActionDescription = (action: AgentAction): string => {
    switch (action.type) {
      case 'ADD_MATCH':
        let description = `Th√™m tr·∫≠n ƒë·∫•u ${action.match.homeTeam} vs ${action.match.awayTeam}`;
        if (action.match.completed && action.match.homeScore !== undefined && action.match.awayScore !== undefined) {
          description += ` (${action.match.homeScore}-${action.match.awayScore})`;
        }
        return description;
      case 'FILTER_MATCHES':
        return `L·ªçc tr·∫≠n ƒë·∫•u ${
          action.filter === 'upcoming' ? 's·∫Øp di·ªÖn ra' :
          action.filter === 'completed' ? 'ƒë√£ k·∫øt th√∫c' : 't·∫•t c·∫£'
        }`;
      case 'FIND_MATCH':
        return `T√¨m ki·∫øm tr·∫≠n ƒë·∫•u "${action.criteria}"`;
      case 'NONE':
        return 'Kh√¥ng c√≥ h√†nh ƒë·ªông';
    }
  };

  // Agent Action Executors
  const executeAgentAction = (action: AgentAction) => {
    if (action.type === 'NONE') return;

    const actionMessageId = generateMessageId();
    const actionMessage = {
      role: 'agent' as const,
      content: `‚ö° ƒêang th·ª±c hi·ªán h√†nh ƒë·ªông: ${getActionDescription(action)}`,
      id: actionMessageId
    };

    setChatMessages(prev => [...prev, actionMessage]);

    // Execute different actions based on type
    switch (action.type) {
      case 'ADD_MATCH':
        // Create a complete match object with all required fields
        const newMatch = {
          ...newMatchTemplate,
          id: `match-${Date.now()}`,
          ...action.match,
          // Set default values for any missing fields
          homeTeam: action.match.homeTeam || "",
          awayTeam: action.match.awayTeam || "",
          date: action.match.date || new Date().toISOString().split("T")[0],
          time: action.match.time || "19:00",
          venue: action.match.venue || "",
          competition: action.match.competition || "V-League",
          completed: action.match.completed || false,
        };

        // Automatically add the match
        onAddMatch(newMatch as Match);

        const resultMessageId = generateMessageId();
        setChatMessages(prev => [
          ...prev,
          {
            role: 'agent',
            content: `‚úÖ ƒê√£ th√™m tr·∫≠n ƒë·∫•u m·ªõi:\n\n${newMatch.homeTeam} VS ${newMatch.awayTeam}\n\nV√†o ng√†y: ${formatDate(newMatch.date)}${newMatch.completed ? `\nK·∫øt qu·∫£: ${newMatch.homeScore || 0}-${newMatch.awayScore || 0}` : ''}${newMatch.notes ? `\nGhi ch√∫: ${newMatch.notes}` : ''}`,
            id: resultMessageId
          }
        ]);
        break;

      case 'FILTER_MATCHES':
        if (action.filter === 'upcoming') {
          setFilter('upcoming');
        } else if (action.filter === 'completed') {
          setFilter('completed');
        } else {
          setFilter('all');
        }

        const filterMessageId = generateMessageId();
        setChatMessages(prev => [
          ...prev,
          {
            role: 'agent',
            content: `‚úÖ ƒê√£ l·ªçc danh s√°ch tr·∫≠n ƒë·∫•u: ${
              action.filter === 'upcoming' ? 'S·∫Øp di·ªÖn ra' :
              action.filter === 'completed' ? 'ƒê√£ k·∫øt th√∫c' : 'T·∫•t c·∫£'
            }`,
            id: filterMessageId
          }
        ]);
        break;

      case 'FIND_MATCH':
        const searchTerm = action.criteria.toLowerCase();
        const foundMatches = matches.filter(match =>
          match.homeTeam.toLowerCase().includes(searchTerm) ||
          match.awayTeam.toLowerCase().includes(searchTerm) ||
          match.competition.toLowerCase().includes(searchTerm) ||
          match.venue.toLowerCase().includes(searchTerm)
        );

        const findMessageId = generateMessageId();
        if (foundMatches.length > 0) {
          const matchesInfo = foundMatches.map(match =>
            `‚Ä¢ ${match.homeTeam} VS ${match.awayTeam}\n  Ng√†y: ${formatDate(match.date)}  |  ƒê·ªãa ƒëi·ªÉm: ${match.venue}`
          ).join('\n\n');

          setChatMessages(prev => [
            ...prev,
            {
              role: 'agent',
              content: `üîç T√¨m th·∫•y ${foundMatches.length} tr·∫≠n ƒë·∫•u:\n\n${matchesInfo}`,
              id: findMessageId
            }
          ]);
        } else {
          setChatMessages(prev => [
            ...prev,
            {
              role: 'agent',
              content: `‚ùå Kh√¥ng t√¨m th·∫•y tr·∫≠n ƒë·∫•u n√†o ph√π h·ª£p v·ªõi "${action.criteria}"`,
              id: findMessageId
            }
          ]);
        }
        break;
    }

    setPendingAgentAction(null);
  };

  // AI chat function
  const askAI = async () => {
    if (!aiQuestion.trim() && !uploadedImage) return;

    // Add user message to chat history
    const userMessage = aiQuestion.trim();
    const userMessageId = generateMessageId();

    setChatMessages(prev => [...prev, {
      role: 'user',
      content: userMessage || (uploadedImage ? '[ƒê√£ g·ª≠i m·ªôt h√¨nh ·∫£nh]' : ''),
      id: userMessageId
    }]);

    // Check for founder question
    const founderQuestions = [
      'ng∆∞·ªùi s√°ng l·∫≠p',
      'ai s√°ng l·∫≠p',
      'founder',
      'ng∆∞·ªùi t·∫°o ra',
      'ai t·∫°o ra',
      'ai l√†m ra',
      'ng∆∞·ªùi ph√°t tri·ªÉn',
      'ai ph√°t tri·ªÉn'
    ];

    if (founderQuestions.some(q => userMessage.toLowerCase().includes(q))) {
      const founderResponse = `ƒê√¢y l√† ph·∫ßn m·ªÅm qu·∫£n l√Ω ƒë·ªôi b√≥ng do m·ªôt nh√≥m sinh vi√™n kƒ© thu·∫≠t c·ªßa c√°c tr∆∞·ªùng nh∆∞ <b>HCMUT</b>, <b>UIT</b>, <b>SGU</b> c√πng ph√°t tri·ªÉn. Ng∆∞·ªùi ƒë·ª©ng ƒë·∫ßu d·ª± √°n (CO-Founder) l√† <b>L√ä NG·ªåC GI√ÄU</b>, <b>NGUY·ªÑN HO√ÄNG NAM</b>, <b>TR·∫¶N C√îNG MINH</b>,... ƒë√¢y l√† nh·ªØng ng∆∞·ªùi th·ª±c hi·ªán code v√† ph√°t tri·ªÉn √Ω t∆∞·ªüng d·ª± √°n.`;

      const aiMessageId = generateMessageId();
      setChatMessages(prev => [...prev, {
        role: 'ai',
        content: founderResponse,
        id: aiMessageId
      }]);

      // Speak the AI response
      speakText(founderResponse);

      // Clear input after sending
      setAiQuestion("");
      handleRemoveImage();
      return;
    }

    // First check if the message directly asks to add a match
    if (userMessage.toLowerCase().includes('th√™m tr·∫≠n') ||
        userMessage.toLowerCase().includes('t·∫°o tr·∫≠n') ||
        userMessage.includes('ƒë·∫∑t l·ªãch tr·∫≠n')) {

      // Try to extract match information directly from the prompt
      const matchInfo = extractMatchInfo(userMessage);

      // If we have at least home team and away team, suggest adding the match
      if (matchInfo.homeTeam && matchInfo.awayTeam) {
        const action: AgentAction = {
          type: 'ADD_MATCH',
          match: matchInfo
        };

        // Add a system message confirming the extracted info with ID
        const agentMessageId = generateMessageId();

        setChatMessages(prev =>
          [...prev, {
            role: 'agent',
            content: `ü§ñ T√¥i ƒë√£ hi·ªÉu y√™u c·∫ßu c·ªßa b·∫°n. B·∫°n mu·ªën th√™m tr·∫≠n ƒë·∫•u:

${matchInfo.homeTeam} VS ${matchInfo.awayTeam}

Th√¥ng tin chi ti·∫øt:${matchInfo.date ? `
‚Ä¢ Ng√†y thi ƒë·∫•u: ${matchInfo.date}` : ''}${matchInfo.time ? `
‚Ä¢ Gi·ªù thi ƒë·∫•u: ${matchInfo.time}` : ''}${matchInfo.venue ? `
‚Ä¢ ƒê·ªãa ƒëi·ªÉm: ${matchInfo.venue}` : ''}${matchInfo.competition ? `
‚Ä¢ Gi·∫£i ƒë·∫•u: ${matchInfo.competition}` : ''}${matchInfo.completed ? `
‚Ä¢ Tr·∫°ng th√°i: ƒê√£ k·∫øt th√∫c${matchInfo.homeScore !== undefined && matchInfo.awayScore !== undefined ? ` (T·ªâ s·ªë: ${matchInfo.homeScore}-${matchInfo.awayScore})` : ''}` : ''}${matchInfo.notes ? `
‚Ä¢ Ghi ch√∫: ${matchInfo.notes}` : ''}

Vui l√≤ng x√°c nh·∫≠n b·∫±ng n√∫t b√™n d∆∞·ªõi.`,
            id: agentMessageId
          }]
        );

        setPendingAgentAction(action);
        setAiQuestion("");
        handleRemoveImage();
        return;
      }
    }

    // Check if user message contains a direct action command
    if (userMessage.includes('[ACTION:')) {
      try {
        const { action } = parseAgentAction(userMessage);
        if (action.type !== 'NONE') {
          // Add a clear system message about detected action
          const actionMessageId = generateMessageId();
          setChatMessages(prev => [...prev, {
            role: 'agent',
            content: `ü§ñ ƒê√£ ph√°t hi·ªán l·ªánh th·ª±c hi·ªán: "${getActionDescription(action)}"\n\nVui l√≤ng x√°c nh·∫≠n b·∫±ng n√∫t b√™n d∆∞·ªõi.`,
            id: actionMessageId
          }]);

          setPendingAgentAction(action);
          setAiQuestion("");
          handleRemoveImage();
          return;
        }
      } catch (error) {
        console.error("Failed to parse direct action:", error);
        // Show error message if parsing failed
        const errorMessageId = generateMessageId();
        setChatMessages(prev => [...prev, {
          role: 'agent',
          content: `‚ùå Kh√¥ng th·ªÉ ph√¢n t√≠ch l·ªánh. Vui l√≤ng ki·ªÉm tra ƒë·ªãnh d·∫°ng JSON.`,
          id: errorMessageId
        }]);
      }
    }

    // Check if message starts with '@' - handle as general knowledge question
    if (userMessage.startsWith('@')) {
      const generalQuestion = userMessage.substring(1).trim(); // Remove @ prefix

      setIsAiLoading(true);

      try {
        const response = await fetch(
          `https://generativelanguage.googleapis.com/v1beta/models/gemini-2.0-flash:generateContent?key=${GEMINI_API_KEY}`,
          {
            method: "POST",
            headers: {
              "Content-Type": "application/json",
            },
            body: JSON.stringify({
              contents: [{
                parts: [{ text: generalQuestion }]
              }]
            }),
          }
        );

        if (!response.ok) {
          throw new Error(`API request failed with status ${response.status}`);
        }

        const data = await response.json();
        const aiResponse = data.candidates?.[0]?.content?.parts?.[0]?.text || "Kh√¥ng th·ªÉ l·∫•y ƒë∆∞·ª£c ph·∫£n h·ªìi t·ª´ AI.";

        // Add AI response to chat history
        const aiMessageId = generateMessageId();
        setChatMessages(prev => [...prev, {
          role: 'ai',
          content: aiResponse,
          id: aiMessageId
        }]);

        // Speak the AI response
        speakText(aiResponse);

        // Clear input after sending
        setAiQuestion("");
        handleRemoveImage();

      } catch (error) {
        console.error("Error querying AI:", error);
        const errorMessageId = generateMessageId();
        setChatMessages(prev => [...prev, {
          role: 'ai',
          content: "ƒê√£ x·∫£y ra l·ªói khi t∆∞∆°ng t√°c v·ªõi AI. Vui l√≤ng th·ª≠ l·∫°i sau.",
          id: errorMessageId
        }]);
      } finally {
        setIsAiLoading(false);
      }
      return;
    }

    setIsAiLoading(true);

    try {
      // Create context from matches data
      const matchesContext = matches.map(match =>
        `${match.homeTeam} vs ${match.awayTeam} - ${formatDate(match.date)} at ${match.time}, ${match.venue}, ${match.competition}${
          match.completed ? `, Score: ${match.homeScore}-${match.awayScore}` : ""
        }`
      ).join("\n");

      // Describe agent capabilities
      const agentCapabilities = `
B·∫°n l√† m·ªôt AI Agent c√≥ kh·∫£ nƒÉng kh√¥ng ch·ªâ tr·∫£ l·ªùi c√¢u h·ªèi m√† c√≤n th·ª±c hi·ªán c√°c h√†nh ƒë·ªông sau:
1. Th√™m tr·∫≠n ƒë·∫•u m·ªõi (ADD_MATCH): Khi ng∆∞·ªùi d√πng y√™u c·∫ßu th√™m tr·∫≠n ƒë·∫•u, b·∫°n c√≥ th·ªÉ t·∫°o m·ªôt tr·∫≠n ƒë·∫•u m·ªõi
2. L·ªçc danh s√°ch tr·∫≠n ƒë·∫•u (FILTER_MATCHES): Hi·ªÉn th·ªã c√°c tr·∫≠n s·∫Øp t·ªõi, ƒë√£ k·∫øt th√∫c, ho·∫∑c t·∫•t c·∫£
3. T√¨m ki·∫øm tr·∫≠n ƒë·∫•u (FIND_MATCH): T√¨m tr·∫≠n ƒë·∫•u d·ª±a theo ƒë·ªôi b√≥ng, gi·∫£i ƒë·∫•u, ƒë·ªãa ƒëi·ªÉm...

N·∫øu y√™u c·∫ßu c·ªßa ng∆∞·ªùi d√πng li√™n quan ƒë·∫øn m·ªôt trong c√°c h√†nh ƒë·ªông tr√™n, h√£y tr·∫£ l·ªùi v√† th√™m c√∫ ph√°p JSON ƒë·∫∑c bi·ªát:
[ACTION:{"type":"ACTION_TYPE",...chi ti·∫øt action}]

V√≠ d·ª•:
- N·∫øu ng∆∞·ªùi d√πng mu·ªën th√™m tr·∫≠n ƒë·∫•u gi·ªØa MU v√† Chelsea ng√†y 15/09/2023:
[ACTION:{"type":"ADD_MATCH","match":{"homeTeam":"MU","awayTeam":"Chelsea","date":"2023-09-15","venue":"Old Trafford","competition":"Ngo·∫°i h·∫°ng Anh"}}]

- N·∫øu ng∆∞·ªùi d√πng mu·ªën xem c√°c tr·∫≠n s·∫Øp di·ªÖn ra:
[ACTION:{"type":"FILTER_MATCHES","filter":"upcoming"}]

- N·∫øu ng∆∞·ªùi d√πng mu·ªën t√¨m tr·∫≠n ƒë·∫•u v·ªõi Man City:
[ACTION:{"type":"FIND_MATCH","criteria":"Man City"}]

Vi·ªác c·ªßa b·∫°n l√† hi·ªÉu √Ω ƒë·ªãnh c·ªßa ng∆∞·ªùi d√πng v√† th·ª±c hi·ªán ƒë√∫ng h√†nh ƒë·ªông t∆∞∆°ng ·ª©ng.
      `;

      let requestBody: any = {
        contents: [{
          parts: []
        }]
      };

      // Add text if provided
      if (userMessage) {
        const prompt = `Th√¥ng tin v·ªÅ c√°c tr·∫≠n ƒë·∫•u:\n${matchesContext}\n\n${agentCapabilities}\n\nC√¢u h·ªèi: ${userMessage}`;
        requestBody.contents[0].parts.push({ text: prompt });
      }

      // Add image if provided
      if (imageFile) {
        const imageBase64 = uploadedImage?.split(',')[1];
        if (imageBase64) {
          requestBody.contents[0].parts.push({
            inline_data: {
              mime_type: imageFile.type,
              data: imageBase64
            }
          });

          // Add specific prompt for image analysis if no text was provided
          if (!userMessage) {
            requestBody.contents[0].parts.push({
              text: `${agentCapabilities}\n\nH√£y ph√¢n t√≠ch h√¨nh ·∫£nh n√†y v√† m√¥ t·∫£ nh·ªØng g√¨ b·∫°n th·∫•y li√™n quan ƒë·∫øn b√≥ng ƒë√° ho·∫∑c th·ªÉ thao.`
            });
          }
        }
      }

      const response = await fetch(
        `https://generativelanguage.googleapis.com/v1beta/models/gemini-2.0-flash:generateContent?key=${GEMINI_API_KEY}`,
        {
          method: "POST",
          headers: {
            "Content-Type": "application/json",
          },
          body: JSON.stringify(requestBody),
        }
      );

      if (!response.ok) {
        throw new Error(`API request failed with status ${response.status}`);
      }

      const data = await response.json();
      const rawAiText = data.candidates?.[0]?.content?.parts?.[0]?.text || "Kh√¥ng th·ªÉ l·∫•y ƒë∆∞·ª£c ph·∫£n h·ªìi t·ª´ AI.";

      // Parse agent actions
      const { text: aiText, action } = parseAgentAction(rawAiText);

      // Add AI response to chat history
      const aiMessageId = generateMessageId();
      setChatMessages(prev => [...prev, {
        role: 'ai',
        content: aiText,
        id: aiMessageId
      }]);

      // Speak the AI response
      speakText(aiText);

      // Handle agent action if present
      if (action.type !== 'NONE') {
        setPendingAgentAction(action);
      }

      // Clear input and image after sending
      setAiQuestion("");
      handleRemoveImage();

    } catch (error) {
      console.error("Error querying AI:", error);
      const errorMessageId = generateMessageId();
      setChatMessages(prev => [...prev, {
        role: 'ai',
        content: "ƒê√£ x·∫£y ra l·ªói khi t∆∞∆°ng t√°c v·ªõi AI. Vui l√≤ng th·ª≠ l·∫°i sau.",
        id: errorMessageId
      }]);
    } finally {
      setIsAiLoading(false);
    }
  };

  // Toggle AI sidebar visibility
  const toggleAiSidebar = () => {
    setShowAiSidebar(!showAiSidebar);
    if (!showAiSidebar) {
      setAiQuestion("");
      setUploadedImage(null);
      setImageFile(null);
    }
  };

  // Add handleChatDialogQuestion function to handle chat requests from the dialog
  const handleChatDialogQuestion = async () => {
    if (!chatDialogQuestion.trim()) return;

    let apiKeyToUse = useCustomApiKey ? customApiKey : GEMINI_API_KEY;

    if (!apiKeyToUse) {
      alert("Vui l√≤ng nh·∫≠p API key ho·∫∑c s·ª≠ d·ª•ng API key m·∫∑c ƒë·ªãnh");
      return;
    }

    // Add user message to chat history
    const userMessage = chatDialogQuestion.trim();
    const userMessageId = generateMessageId();

    setChatMessages(prev => [...prev, {
      role: 'user',
      content: userMessage,
      id: userMessageId
    }]);

    // Check for founder question
    const founderQuestions = [
      'ng∆∞·ªùi s√°ng l·∫≠p',
      'ai s√°ng l·∫≠p',
      'founder',
      'ng∆∞·ªùi t·∫°o ra',
      'ai t·∫°o ra',
      'ai l√†m ra',
      'ng∆∞·ªùi ph√°t tri·ªÉn',
      'ai ph√°t tri·ªÉn'
    ];

    if (founderQuestions.some(q => userMessage.toLowerCase().includes(q))) {
      const founderResponse = `ƒê√¢y l√† ph·∫ßn m·ªÅm qu·∫£n l√Ω ƒë·ªôi b√≥ng do m·ªôt nh√≥m sinh vi√™n kƒ© thu·∫≠t c·ªßa c√°c tr∆∞·ªùng nh∆∞ <b>HCMUT</b>, <b>UIT</b>, <b>SGU</b> c√πng ph√°t tri·ªÉn. Ng∆∞·ªùi ƒë·ª©ng ƒë·∫ßu d·ª± √°n (CO-Founder) l√† <b>L√ä NG·ªåC GI√ÄU</b>, <b>NGUY·ªÑN HO√ÄNG NAM</b>, <b>TR·∫¶N C√îNG MINH</b>,... ƒë√¢y l√† nh·ªØng ng∆∞·ªùi th·ª±c hi·ªán code v√† ph√°t tri·ªÉn √Ω t∆∞·ªüng d·ª± √°n.`;

      const aiMessageId = generateMessageId();
      setChatMessages(prev => [...prev, {
        role: 'ai',
        content: founderResponse,
        id: aiMessageId
      }]);

      // Speak the AI response
      speakText(founderResponse);

      // Clear input after sending
      setChatDialogQuestion("");
      return;
    }

    setIsAiLoading(true);

    try {
      // Check if message starts with '@' - handle as general knowledge question
      if (userMessage.startsWith('@')) {
        const generalQuestion = userMessage.substring(1).trim(); // Remove @ prefix

        const response = await fetch(
          `https://generativelanguage.googleapis.com/v1beta/models/gemini-2.0-flash:generateContent?key=${GEMINI_API_KEY}`,
          {
            method: "POST",
            headers: {
              "Content-Type": "application/json",
            },
            body: JSON.stringify({
              contents: [{
                parts: [{ text: generalQuestion }]
              }]
            }),
          }
        );

        if (!response.ok) {
          throw new Error(`API request failed with status ${response.status}`);
        }

        const data = await response.json();
        const aiResponse = data.candidates?.[0]?.content?.parts?.[0]?.text || "Kh√¥ng th·ªÉ l·∫•y ƒë∆∞·ª£c ph·∫£n h·ªìi t·ª´ AI.";

        // Add AI response to chat history
        const aiMessageId = generateMessageId();
        setChatMessages(prev => [...prev, {
          role: 'ai',
          content: aiResponse,
          id: aiMessageId
        }]);

        // Speak the AI response
        speakText(aiResponse);

        // Clear input after sending
        setChatDialogQuestion("");
        handleRemoveImage();

      } else {
        // Regular app-related question - use the existing functionality
        const response = await fetch(
          `https://generativelanguage.googleapis.com/v1beta/models/gemini-2.0-flash:generateContent?key=${apiKeyToUse}`,
          {
            method: "POST",
            headers: {
              "Content-Type": "application/json",
            },
            body: JSON.stringify({
              contents: [{
                parts: [{ text: userMessage }]
              }]
            }),
          }
        );

        if (!response.ok) {
          throw new Error(`API request failed with status ${response.status}`);
        }

        const data = await response.json();
        const aiResponse = data.candidates?.[0]?.content?.parts?.[0]?.text || "Kh√¥ng th·ªÉ l·∫•y ƒë∆∞·ª£c ph·∫£n h·ªìi t·ª´ AI.";

        // Add AI response to chat history
        const aiMessageId = generateMessageId();
        setChatMessages(prev => [...prev, {
          role: 'ai',
          content: aiResponse,
          id: aiMessageId
        }]);

        // Speak the AI response
        speakText(aiResponse);
      }

      // Clear input after sending
      setChatDialogQuestion("");

    } catch (error) {
      console.error("Error querying AI:", error);
      const errorMessageId = generateMessageId();
      setChatMessages(prev => [...prev, {
        role: 'ai',
        content: "ƒê√£ x·∫£y ra l·ªói khi t∆∞∆°ng t√°c v·ªõi AI. Vui l√≤ng ki·ªÉm tra API key ho·∫∑c th·ª≠ l·∫°i sau.",
        id: errorMessageId
      }]);
    } finally {
      setIsAiLoading(false);
    }
  };

  const handleRateMatch = (match: Match) => {
    setRatingMatch(match)
    setIsRatingDialogOpen(true)
  }

  const handleViewEvents = (match: Match) => {
    setEventsMatch(match)
    setIsEventsDialogOpen(true)
  }

  const handleSaveRatings = (ratings: PlayerRatingsData) => {
    if (ratingMatch) {
      const updatedMatch = {
        ...ratingMatch,
        playerRatings: ratings
      }
      onUpdateMatch(updatedMatch)
    }
  }

  const handleSaveEvents = (events: MatchEventsType, updatedPlayers?: {player: Player, teamId: string}[]) => {
    if (eventsMatch) {
      const updatedMatch = {
        ...eventsMatch,
        events: events
      }
      onUpdateMatch(updatedMatch)

      // C·∫≠p nh·∫≠t th√¥ng tin c·∫ßu th·ªß n·∫øu c√≥
      if (updatedPlayers && updatedPlayers.length > 0) {
        // T·∫°o b·∫£n sao ƒë·ªôi nh√† v√† ƒë·ªôi kh√°ch ƒë·ªÉ c·∫≠p nh·∫≠t
        const updatedHomeTeam = {...homeTeam};
        const updatedAwayTeam = {...awayTeam};
        let homeTeamUpdated = false;
        let awayTeamUpdated = false;

        // C·∫≠p nh·∫≠t th√¥ng tin cho t·ª´ng c·∫ßu th·ªß
        updatedPlayers.forEach(({ player, teamId }) => {
          if (teamId === homeTeam.id) {
            // C·∫≠p nh·∫≠t c·∫ßu th·ªß trong ƒë·ªôi nh√†
            const playerIndex = updatedHomeTeam.players.findIndex(p => p.id === player.id);
            if (playerIndex !== -1) {
              updatedHomeTeam.players[playerIndex] = {
                ...updatedHomeTeam.players[playerIndex],
                yellowCards: player.yellowCards,
                redCards: player.redCards
              };
              homeTeamUpdated = true;
            }
          } else if (teamId === awayTeam.id) {
            // C·∫≠p nh·∫≠t c·∫ßu th·ªß trong ƒë·ªôi kh√°ch
            const playerIndex = updatedAwayTeam.players.findIndex(p => p.id === player.id);
            if (playerIndex !== -1) {
              updatedAwayTeam.players[playerIndex] = {
                ...updatedAwayTeam.players[playerIndex],
                yellowCards: player.yellowCards,
                redCards: player.redCards
              };
              awayTeamUpdated = true;
            }
          }
        });

        // C·∫≠p nh·∫≠t ƒë·ªôi n·∫øu c√≥ thay ƒë·ªïi
        if (homeTeamUpdated && onUpdateHomeTeam) {
          onUpdateHomeTeam(updatedHomeTeam);
        }
        if (awayTeamUpdated && onUpdateAwayTeam) {
          onUpdateAwayTeam(updatedAwayTeam);
        }
      }

      setIsEventsDialogOpen(false)
    }
  }

  const [retryStatus, setRetryStatus] = useState<string | null>(null)

  // Voice notification states
  const [voiceNotification, setVoiceNotification] = useState<string | null>(null)
  const [showVoiceNotification, setShowVoiceNotification] = useState(false)

  // Add animation styles when component mounts
  useEffect(() => {
    // Create a style element
    const styleEl = document.createElement('style');
    styleEl.innerHTML = fadeInOutKeyframes;
    document.head.appendChild(styleEl);

    // Cleanup on unmount
    return () => {
      document.head.removeChild(styleEl);
    };
  }, []);

  return (
    <div className="relative flex flex-col md:flex-row h-[calc(100vh-4rem)]">
      {/* Main Content */}
      <div className={`flex-1 overflow-auto transition-all duration-300 ${showAiSidebar ? 'md:pr-[350px]' : ''}`}>
        <div className="space-y-4 p-2 md:p-4">
          <div className="flex flex-col sm:flex-row sm:items-center justify-between gap-2">
            <h2 className="text-xl font-bold">L·ªãch thi ƒë·∫•u</h2>
            <div className="flex flex-wrap gap-2">
              <Button onClick={toggleAiSidebar} variant="outline" className="flex items-center text-xs sm:text-sm">
                <Bot className="h-4 w-4 mr-1 sm:mr-2" /> {showAiSidebar ? "ƒê√≥ng AI" : "H·ªèi AI"}
              </Button>
              <Button onClick={handleAddMatch} className="bg-blue-500 hover:bg-blue-600 text-xs sm:text-sm">
                <Plus className="h-4 w-4 mr-1 sm:mr-2" /> Th√™m tr·∫≠n ƒë·∫•u
              </Button>
            </div>
          </div>

          <div className="flex flex-wrap gap-2">
            <Button variant={filter === "all" ? "default" : "outline"} size="sm" onClick={() => setFilter("all")} className="text-xs">
              T·∫•t c·∫£
            </Button>
            <Button variant={filter === "upcoming" ? "default" : "outline"} size="sm" onClick={() => setFilter("upcoming")} className="text-xs">
              S·∫Øp di·ªÖn ra
            </Button>
            <Button
              variant={filter === "completed" ? "default" : "outline"}
              size="sm"
              onClick={() => setFilter("completed")}
              className="text-xs"
            >
              ƒê√£ k·∫øt th√∫c
            </Button>
          </div>

          {sortedMatches.length === 0 ? (
            <div className="text-center p-4 md:p-8 text-gray-500">
              Kh√¥ng c√≥ tr·∫≠n ƒë·∫•u n√†o {filter === "upcoming" ? "s·∫Øp di·ªÖn ra" : filter === "completed" ? "ƒë√£ k·∫øt th√∫c" : ""}
            </div>
          ) : (
            <div className="space-y-4">
              {sortedMatches.map((match) => (
                <div
                  key={match.id}
                  className={`border rounded-lg p-3 md:p-4 ${
                    match.completed ? "bg-gray-50" : "bg-white"
                  } hover:shadow-md transition-shadow`}
                >
                  <div className="flex flex-col sm:flex-row justify-between items-start mb-4 gap-2">
                    <div>
                      <Badge variant={match.completed ? "secondary" : "default"}>
                        {match.completed ? "ƒê√£ k·∫øt th√∫c" : "S·∫Øp di·ªÖn ra"}
                      </Badge>
                      <div className="flex items-center mt-2 text-sm text-gray-500">
                        <Trophy className="h-4 w-4 mr-1" />
                        {match.competition}
                      </div>
                    </div>
                    <div className="flex flex-wrap gap-1">
                      {match.completed && (
                        <>
                          <Button
                            variant="outline"
                            size="sm"
                            className="h-8 flex items-center text-xs"
                            onClick={() => handleRateMatch(match)}
                          >
                            <Star className="h-3 w-3 mr-1" />
                            {match.playerRatings ? "Xem ƒë√°nh gi√°" : "ƒê√°nh gi√°"}
                          </Button>
                          <Button
                            variant="outline"
                            size="sm"
                            className="h-8 flex items-center text-xs"
                            onClick={() => handleViewEvents(match)}
                          >
                            <Goal className="h-3 w-3 mr-1" />
                            {match.events ? "Xem s·ª± ki·ªán" : "Th√™m s·ª± ki·ªán"}
                          </Button>
                        </>
                      )}
                      <Button variant="ghost" size="sm" className="h-8 w-8 p-0" onClick={() => handleEditMatch(match)}>
                        <Edit className="h-4 w-4" />
                      </Button>
                      <Button
                        variant="ghost"
                        size="sm"
                        className="h-8 w-8 p-0 text-red-500"
                        onClick={() => handleDeleteMatch(match.id)}
                      >
                        <Trash2 className="h-4 w-4" />
                      </Button>
                    </div>
                  </div>

                  <div className="flex justify-between items-center mb-4">
                    <div className="text-right flex-1">
                      <p className="font-bold text-base sm:text-lg">{match.homeTeam}</p>
                      {match.completed && <p className="text-xl sm:text-2xl font-bold">{match.homeScore}</p>}
                    </div>
                    <div className="mx-2 sm:mx-4 text-center">
                      <p className="text-sm font-medium">VS</p>
                      {match.completed && <p className="text-lg font-bold">-</p>}
                    </div>
                    <div className="text-left flex-1">
                      <p className="font-bold text-base sm:text-lg">{match.awayTeam}</p>
                      {match.completed && <p className="text-xl sm:text-2xl font-bold">{match.awayScore}</p>}
                    </div>
                  </div>

                  {/* MVP Display */}
                  {match.playerRatings && match.completed && (match.playerRatings.homeMVP || match.playerRatings.awayMVP) && (
                    <div className="grid grid-cols-1 sm:grid-cols-2 gap-4 mb-4">
                      {/* Home Team MVP */}
                      <div className="bg-yellow-100 rounded-lg p-3 sm:p-5 relative overflow-hidden shadow-md border border-yellow-200">
                        <div className="absolute top-0 right-0 w-32 h-32 rounded-full bg-yellow-300 opacity-20 transform translate-x-10 -translate-y-10"></div>

                        {match.homeScore !== undefined && match.awayScore !== undefined && match.homeScore > match.awayScore && (
                          <div className="absolute top-3 right-3 bg-blue-500 text-white px-3 py-1 rounded-full text-xs font-bold shadow-sm">
                            WIN
                          </div>
                        )}

                        {match.homeScore !== undefined && match.awayScore !== undefined && match.homeScore < match.awayScore && (
                          <div className="absolute top-3 right-3 border border-gray-300 text-gray-600 px-3 py-1 rounded-full text-xs font-bold">
                            LOSS
                          </div>
                        )}

                        <div className="flex items-start">
                          <div className="mr-3 sm:mr-4">
                            <Trophy className="h-8 w-8 sm:h-10 sm:w-10 text-yellow-500" />
                          </div>
                          <div>
                            <div className="text-sm sm:text-base font-bold mb-2 sm:mb-3">MVP ƒê·ªôi nh√†</div>
                            {match.playerRatings?.homeMVP ?
                              (() => {
                                const homeMvpPlayer = homeTeam.players.find(p => p.id === match.playerRatings?.homeMVP);
                                const homeMvpRating = match.playerRatings?.homeTeamRatings.find(r => r.playerId === match.playerRatings?.homeMVP);

                                if (!homeMvpPlayer || !homeMvpRating) {
                                  return <span className="text-gray-500 text-sm">MVP kh√¥ng c√≥ s·∫µn</span>;
                                }

                                return (
                                  <div className="flex items-center">
                                    <div className={`w-10 h-10 sm:w-14 sm:h-14 flex items-center justify-center rounded-full text-white bg-blue-500 mr-2 sm:mr-3 shadow-md`}>
                                      {homeMvpPlayer.image ? (
                                        <img src={homeMvpPlayer.image} alt={homeMvpPlayer.name} className="w-full h-full rounded-full object-cover" />
                                      ) : (
                                        <div className="text-base sm:text-lg font-bold">{homeMvpPlayer.position.charAt(0) || "?"}</div>
                                      )}
                                    </div>
                                    <div>
                                      <p className="text-base sm:text-lg font-bold">{homeMvpPlayer.name}</p>
                                      <p className="text-xs sm:text-sm text-gray-600">{homeMvpPlayer.position}</p>
                                      <div className="flex items-center mt-1">
                                        <Star className="h-4 w-4 sm:h-5 sm:w-5 text-yellow-500 fill-yellow-500" />
                                        <span className="text-base sm:text-lg font-bold ml-1">{homeMvpRating.score.toFixed(1)}</span>
                                      </div>
                                    </div>
                                  </div>
                                );
                              })()
                              : <span className="text-gray-500 text-sm">Ch∆∞a c√≥ MVP</span>
                            }
                          </div>
                        </div>
                      </div>

                      {/* Away Team MVP */}
                      <div className="bg-purple-100 rounded-lg p-3 sm:p-5 relative overflow-hidden shadow-md border border-purple-200">
                        <div className="absolute top-0 right-0 w-32 h-32 rounded-full bg-purple-300 opacity-20 transform translate-x-10 -translate-y-10"></div>

                        {match.homeScore !== undefined && match.awayScore !== undefined && match.awayScore > match.homeScore && (
                          <div className="absolute top-3 right-3 bg-blue-500 text-white px-3 py-1 rounded-full text-xs font-bold shadow-sm">
                            WIN
                          </div>
                        )}

                        {match.homeScore !== undefined && match.awayScore !== undefined && match.awayScore < match.homeScore && (
                          <div className="absolute top-3 right-3 border border-gray-300 text-gray-600 px-3 py-1 rounded-full text-xs font-bold">
                            LOSS
                          </div>
                        )}

                        <div className="flex items-start">
                          <div className="mr-3 sm:mr-4">
                            <Trophy className="h-8 w-8 sm:h-10 sm:w-10 text-purple-500" />
                          </div>
                          <div>
                            <div className="text-sm sm:text-base font-bold mb-2 sm:mb-3">MVP ƒê·ªôi kh√°ch</div>
                            {match.playerRatings?.awayMVP ?
                              (() => {
                                const awayMvpPlayer = awayTeam.players.find(p => p.id === match.playerRatings?.awayMVP);
                                const awayMvpRating = match.playerRatings?.awayTeamRatings.find(r => r.playerId === match.playerRatings?.awayMVP);

                                if (!awayMvpPlayer || !awayMvpRating) {
                                  return <span className="text-gray-500 text-xs sm:text-sm">MVP kh√¥ng c√≥ s·∫µn</span>;
                                }

                                return (
                                  <div className="flex items-center">
                                    <div className={`w-10 h-10 sm:w-14 sm:h-14 flex items-center justify-center rounded-full text-white bg-red-500 mr-2 sm:mr-3 shadow-md`}>
                                      {awayMvpPlayer.image ? (
                                        <img src={awayMvpPlayer.image} alt={awayMvpPlayer.name} className="w-full h-full rounded-full object-cover" />
                                      ) : (
                                        <div className="text-base sm:text-lg font-bold">{awayMvpPlayer.position.charAt(0) || "?"}</div>
                                      )}
                                    </div>
                                    <div>
                                      <p className="text-base sm:text-lg font-bold">{awayMvpPlayer.name}</p>
                                      <p className="text-xs sm:text-sm text-gray-600">{awayMvpPlayer.position}</p>
                                      <div className="flex items-center mt-1">
                                        <Star className="h-4 w-4 sm:h-5 sm:w-5 text-yellow-500 fill-yellow-500" />
                                        <span className="text-base sm:text-lg font-bold ml-1">{awayMvpRating.score.toFixed(1)}</span>
                                      </div>
                                    </div>
                                  </div>
                                );
                              })()
                              : <span className="text-gray-500 text-xs sm:text-sm">Ch∆∞a c√≥ MVP</span>
                            }
                          </div>
                        </div>
                      </div>
                    </div>
                  )}

                  <div className="grid grid-cols-1 sm:grid-cols-2 md:grid-cols-3 gap-2 text-xs sm:text-sm text-gray-600">
                    <div className="flex items-center">
                      <Calendar className="h-3 w-3 sm:h-4 sm:w-4 mr-1 sm:mr-2" />
                      {formatDate(match.date)}
                    </div>
                    <div className="flex items-center">
                      <Clock className="h-3 w-3 sm:h-4 sm:w-4 mr-1 sm:mr-2" />
                      {match.time}
                    </div>
                    <div className="flex items-center">
                      <MapPin className="h-3 w-3 sm:h-4 sm:w-4 mr-1 sm:mr-2" />
                      {match.venue}
                    </div>
                  </div>

                  {match.notes && (
                    <div className="mt-3 pt-3 border-t text-xs sm:text-sm text-gray-600">
                      <p className="font-medium mb-1">Ghi ch√∫:</p>
                      <p>{match.notes}</p>
                    </div>
                  )}

                  {/* Match Events Summary */}
                  {match.events && match.completed && (
                    <div className="mt-3 pt-3 border-t text-xs sm:text-sm">
                      <p className="font-medium mb-2 flex items-center">
                        <Clock className="h-3 w-3 sm:h-4 sm:w-4 mr-1" /> Di·ªÖn bi·∫øn tr·∫≠n ƒë·∫•u:
                      </p>

                      <div className="space-y-2">
                        {/* Goals */}
                        {match.events.goals.length > 0 && (
                          <div className="flex items-start">
                            <div className="w-5 sm:w-6 flex-shrink-0">
                              <Goal className="h-3 w-3 sm:h-4 sm:w-4 text-green-600" />
                            </div>
                            <div className="flex-grow">
                              <p className="font-medium text-gray-700 text-xs sm:text-sm">B√†n th·∫Øng:</p>
                              <div className="space-y-1">
                                {match.events.goals
                                  .sort((a, b) => a.minute - b.minute)
                                  .map((goal, index) => {
                                    const isHomeTeam = goal.teamId === homeTeam.id;
                                    const player = isHomeTeam
                                      ? homeTeam.players.find(p => p.id === goal.playerId)
                                      : awayTeam.players.find(p => p.id === goal.playerId);

                                    const assistPlayer = goal.assistPlayerId
                                      ? (goal.teamId === homeTeam.id
                                          ? homeTeam.players.find(p => p.id === goal.assistPlayerId)
                                          : awayTeam.players.find(p => p.id === goal.assistPlayerId))
                                      : undefined;

                                    if (!player) return null;

                                    return (
                                      <div key={goal.id} className="flex flex-wrap items-center text-gray-600 text-xs sm:text-sm">
                                        <Badge className="mr-2 bg-gray-200 text-gray-800 font-normal text-[10px] sm:text-xs">{goal.minute}'</Badge>
                                        <span className={`${isHomeTeam ? 'text-blue-600' : 'text-red-600'} font-medium`}>
                                          {player.name}
                                          {goal.isOwnGoal && <span className="text-gray-500">(ph·∫£n l∆∞·ªõi)</span>}
                                          {goal.isPenalty && <span className="text-gray-500">(ph·∫°t ƒë·ªÅn)</span>}
                                        </span>
                                        {assistPlayer && (
                                          <span className="text-gray-500 ml-1 text-[10px] sm:text-xs">
                                            (ki·∫øn t·∫°o: {assistPlayer.name})
                                          </span>
                                        )}
                                      </div>
                                    );
                                  })}
                              </div>
                            </div>
                          </div>
                        )}

                        {/* Cards */}
                        {match.events.cards.length > 0 && (
                          <div className="flex items-start">
                            <div className="w-5 sm:w-6 flex-shrink-0">
                              <Flag className="h-3 w-3 sm:h-4 sm:w-4 text-orange-500" />
                            </div>
                            <div className="flex-grow">
                              <p className="font-medium text-gray-700 text-xs sm:text-sm">Th·∫ª ph·∫°t:</p>
                              <div className="space-y-1">
                                {match.events.cards
                                  .sort((a, b) => a.minute - b.minute)
                                  .map((card, index) => {
                                    const isHomeTeam = card.teamId === homeTeam.id;
                                    const player = isHomeTeam
                                      ? homeTeam.players.find(p => p.id === card.playerId)
                                      : awayTeam.players.find(p => p.id === card.playerId);

                                    if (!player) return null;

                                    return (
                                      <div key={card.id} className="flex flex-wrap items-center text-gray-600 text-xs sm:text-sm">
                                        <Badge className="mr-2 bg-gray-200 text-gray-800 font-normal text-[10px] sm:text-xs">{card.minute}'</Badge>
                                        <div className={`w-2 sm:w-3 h-3 sm:h-4 mr-1 ${card.type === 'yellow' ? 'bg-yellow-400' : 'bg-red-500'}`}></div>
                                        <span className="font-medium">
                                          {player.name}
                                        </span>
                                        {card.reason && (
                                          <span className="text-gray-500 ml-1 text-[10px] sm:text-xs">
                                            ({card.reason})
                                          </span>
                                        )}
                                      </div>
                                    );
                                  })}
                              </div>
                            </div>
                          </div>
                        )}

                        {match.events.goals.length === 0 && match.events.cards.length === 0 && (
                          <p className="text-gray-500 text-xs sm:text-sm">Ch∆∞a c√≥ d·ªØ li·ªáu s·ª± ki·ªán</p>
                        )}
                      </div>
                    </div>
                  )}
                </div>
              ))}
            </div>
          )}
        </div>
      </div>

      {/* AI Sidebar */}
      {showAiSidebar && (
        <div className="fixed inset-0 z-40 md:z-10 md:inset-auto md:top-0 md:right-0 md:h-full md:w-[350px] border-l bg-slate-50 flex flex-col shadow-lg">
          <div className="p-3 sm:p-4 border-b bg-white flex justify-between items-center">
            <h3 className="font-bold text-base sm:text-lg flex items-center">
              <Bot className="h-4 w-4 sm:h-5 sm:w-5 mr-2 text-blue-500" /> Tr·ª£ l√Ω AI
            </h3>
            <div className="flex items-center">
              <Button
                variant={isListening ? "secondary" : "ghost"}
                size="sm"
                className={`h-8 w-8 p-0 mr-1 sm:mr-2 ${isListening ? "bg-red-100 text-red-600" : ""}`}
                onClick={toggleListening}
                title={isListening ? "ƒêang nghe (nh·∫•n ƒë·ªÉ d·ª´ng)" : ""}
              >
                <Mic className={`h-4 w-4 ${isListening ? "animate-pulse text-red-500" : ""}`} />
              </Button>
              <Button
                variant="ghost"
                size="sm"
                className="h-8 w-8 p-0 mr-1 sm:mr-2"
                onClick={toggleVoiceSettings}
                title="C√†i ƒë·∫∑t gi·ªçng n√≥i"
              >
                <Settings className="h-4 w-4" />
              </Button>
              <Button
                variant="ghost"
                size="sm"
                className="h-8 w-8 p-0 mr-1 sm:mr-2"
                onClick={() => setIsSpeechEnabled(!isSpeechEnabled)}
                title={isSpeechEnabled ? "T·∫Øt ph√°t √¢m" : "B·∫≠t ph√°t √¢m"}
              >
                {isSpeechEnabled ? <Volume2 className="h-4 w-4" /> : <VolumeX className="h-4 w-4" />}
              </Button>
              <Button variant="ghost" size="sm" className="h-8 w-8 p-0" onClick={toggleAiSidebar}>
                <X className="h-4 w-4" />
              </Button>
            </div>
          </div>

          {/* Voice notification for AI sidebar */}
          {showVoiceNotification && voiceNotification && (
            <div className="absolute top-14 sm:top-16 right-2 left-2 sm:right-4 sm:left-4 z-50">
              <div
                className="bg-black/80 text-white px-3 sm:px-4 py-2 sm:py-2.5 rounded-md shadow-lg text-xs sm:text-sm flex items-center"
                style={{
                  animation: "fadeInOut 3s ease-in-out forwards",
                }}
              >
                <Volume2 className="h-3 w-3 sm:h-4 sm:w-4 mr-1 sm:mr-2 text-blue-400" />
                <div dangerouslySetInnerHTML={{ __html: voiceNotification }}></div>
              </div>
            </div>
          )}

          {/* Speech recognition error notification */}
          {recognitionError && (
            <div className="absolute top-14 sm:top-16 right-2 left-2 sm:right-4 sm:left-4 z-50">
              <div
                className="bg-red-500/90 text-white px-3 sm:px-4 py-2 sm:py-2.5 rounded-md shadow-lg text-xs sm:text-sm flex items-center"
                style={{
                  animation: "fadeInOut 6s ease-in-out forwards",
                }}
              >
                <Mic className="h-3 w-3 sm:h-4 sm:w-4 mr-1 sm:mr-2 text-white" />
                {recognitionError}
              </div>
            </div>
          )}

          {/* Speech recognition notification */}
          {recognitionNotification && (
            <div className="absolute top-14 sm:top-16 right-2 left-2 sm:right-4 sm:left-4 z-50" style={{ top: recognitionError ? '60px' : '14px' }}>
              <div
                className="bg-blue-500/90 text-white px-3 sm:px-4 py-2 sm:py-2.5 rounded-md shadow-lg text-xs sm:text-sm flex items-center"
                style={{
                  animation: "fadeInOut 3s ease-in-out forwards",
                }}
              >
                <Mic className="h-3 w-3 sm:h-4 sm:w-4 mr-1 sm:mr-2 text-white" />
                {recognitionNotification}
              </div>
            </div>
          )}

          {/* Chat messages */}
          <div className="flex-1 overflow-y-auto p-3 sm:p-4 space-y-3 sm:space-y-4">
            {chatMessages.length === 0 ? (
              <div className="text-center text-gray-500 my-6 sm:my-8">
                <Bot className="h-10 w-10 sm:h-12 sm:w-12 mx-auto mb-2 text-gray-400" />
                <p className="text-xs sm:text-sm">H√£y ƒë·∫∑t c√¢u h·ªèi ho·∫∑c t·∫£i l√™n h√¨nh ·∫£nh ƒë·ªÉ b·∫Øt ƒë·∫ßu.</p>
              </div>
            ) : (
              chatMessages.map((msg) => (
                <div
                  key={msg.id}
                  className={`relative ${
                    msg.role === 'user'
                      ? 'bg-blue-100 ml-auto'
                      : msg.role === 'agent'
                        ? 'bg-purple-100 border border-purple-200'
                        : 'bg-white border'
                  } rounded-lg p-2 sm:p-3 max-w-[95%] ${msg.role === 'user' ? 'text-right' : 'text-left'}`}
                >
                  <div
                    className="whitespace-pre-line text-xs sm:text-sm"
                    dangerouslySetInnerHTML={{ __html: msg.content }}
                  />

                  {msg.role === 'ai' && (
                    <div className="mt-1 text-xs text-gray-400 flex items-center">
                      {autoDetectLanguage && (
                        <>
                          <span>
                            {supportedLanguages.find(lang =>
                              lang.code === detectLanguage(msg.content.replace(/<[^>]*>?/gm, '').replace(/\[([^\]]+)\]\([^)]+\)/gm, '$1')))?.flag || 'üåê'
                            }
                          </span>
                          <span className="ml-1">
                            {supportedLanguages.find(lang =>
                              lang.code === detectLanguage(msg.content.replace(/<[^>]*>?/gm, '').replace(/\[([^\]]+)\]\([^)]+\)/gm, '$1')))?.name || 'Auto'
                            }
                          </span>
                          <span className="ml-1 text-blue-400">
                            (gi·ªçng t·ªëi ∆∞u)
                          </span>
                        </>
                      )}
                      <Button
                        size="sm"
                        variant="ghost"
                        className="h-5 sm:h-6 px-1.5 sm:px-2 py-0 sm:py-1 ml-auto text-[10px] sm:text-xs"
                        onClick={() => {
                          // L·∫•y ng√¥n ng·ªØ ƒë∆∞·ª£c ph√°t hi·ªán
                          const cleanContent = msg.content.replace(/<[^>]*>?/gm, '').replace(/\[([^\]]+)\]\([^)]+\)/gm, '$1');
                          const detectedLang = detectLanguage(cleanContent);
                          const langSettings = supportedLanguages.find(lang => lang.code === detectedLang)?.optimalSettings;

                          // L∆∞u ng√¥n ng·ªØ ph√°t hi·ªán ƒë∆∞·ª£c
                          setLastDetectedLanguage(detectedLang);

                          // Hi·ªÉn th·ªã th√¥ng b√°o
                          const bestVoice = getBestVoiceForLanguage(detectedLang);
                          const voiceName = availableVoices.find(v => v.name === bestVoice)?.name || "M·∫∑c ƒë·ªãnh";
                          const voiceType = availableVoices.find(v => v.name === bestVoice)?.localService ? "Standard" : "Premium";
                          const notification = `${supportedLanguages.find(lang => lang.code === detectedLang)?.flag || 'üåê'} <b>${supportedLanguages.find(lang => lang.code === detectedLang)?.name || detectedLang}</b> - ${voiceName} <span class="text-xs text-blue-300">(${voiceType})</span>`;

                          setVoiceNotification(notification);
                          setShowVoiceNotification(true);

                          // ·∫®n th√¥ng b√°o sau 3 gi√¢y
                          setTimeout(() => {
                            setShowVoiceNotification(false);
                          }, 3000);

                          // Ph√°t √¢m
                          speakText(msg.content);
                        }}
                      >
                        <Volume2 className="h-2.5 w-2.5 sm:h-3 sm:w-3 mr-1" /> ƒê·ªçc
                      </Button>
                    </div>
                  )}

                  {/* Emoji reactions */}
                  {msg.reactions && Object.keys(msg.reactions).length > 0 && (
                    <div className="flex flex-wrap gap-1 mt-2">
                      {Object.values(msg.reactions).map((reaction) => (
                        <span
                          key={reaction.emoji}
                          className={cn(
                            "inline-flex items-center rounded-full border bg-white px-1.5 py-0.5 text-xs",
                            Date.now() - reaction.timestamp < 3000 && "animate-bounce"
                          )}
                          title={`${reaction.count} ${reaction.count > 1 ? 'reactions' : 'reaction'}`}
                        >
                          {reaction.emoji} {reaction.count > 1 && reaction.count}
                        </span>
                      ))}
                    </div>
                  )}

                  {/* Add reaction button */}
                  <div className="absolute bottom-1 right-1">
                    <Popover open={showingEmojiFor === msg.id} onOpenChange={(open) => {
                      if (open) setShowingEmojiFor(msg.id);
                      else setShowingEmojiFor(null);
                    }}>
                      <PopoverTrigger asChild>
                        <Button
                          variant="ghost"
                          size="sm"
                          className="h-5 w-5 sm:h-6 sm:w-6 p-0 rounded-full opacity-50 hover:opacity-100"
                        >
                          <Smile className="h-2.5 w-2.5 sm:h-3 sm:w-3" />
                        </Button>
                      </PopoverTrigger>
                      <PopoverContent className="w-auto p-1" align="end">
                        <div className="flex space-x-1">
                          {availableEmojis.map((emoji) => (
                            <button
                              key={emoji}
                              className="hover:bg-muted p-1.5 sm:p-2 rounded-full transition-colors"
                              onClick={() => addReaction(msg.id, emoji)}
                            >
                              <span className="text-base sm:text-lg">{emoji}</span>
                            </button>
                          ))}
                        </div>
                      </PopoverContent>
                    </Popover>
                  </div>
                </div>
              ))
            )}
            {isAiLoading && (
              <div className="bg-white border rounded-lg p-2 sm:p-3 max-w-[90%]">
                <div className="flex items-center space-x-2">
                  <div className="w-2 h-2 bg-blue-500 rounded-full animate-bounce" style={{ animationDelay: '0s' }}></div>
                  <div className="w-2 h-2 bg-blue-500 rounded-full animate-bounce" style={{ animationDelay: '0.2s' }}></div>
                  <div className="w-2 h-2 bg-blue-500 rounded-full animate-bounce" style={{ animationDelay: '0.4s' }}></div>
                </div>
              </div>
            )}
          </div>

          {/* Pending action */}
          {pendingAgentAction && (
            <div className="p-3 sm:p-4 border-t bg-purple-50 animate-pulse">
              <div className="flex justify-between items-center mb-2">
                <h4 className="font-medium text-xs sm:text-sm flex items-center">
                  <Sparkles className="h-3 w-3 sm:h-4 sm:w-4 mr-1 sm:mr-2 text-purple-500" />
                  H√†nh ƒë·ªông ƒë∆∞·ª£c ƒë·ªÅ xu·∫•t
                </h4>
              </div>

              {pendingAgentAction.type === 'ADD_MATCH' ? (
                <div>
                  <div className="text-xs sm:text-sm mb-2 font-medium">
                    Th√™m tr·∫≠n ƒë·∫•u:
                  </div>
                  <div className="bg-white rounded p-2 mb-3">
                    <div className="flex justify-between items-center mb-2">
                      <span className="font-bold text-xs sm:text-sm">{pendingAgentAction.match.homeTeam}</span>
                      <span className="text-xs mx-2">VS</span>
                      <span className="font-bold text-xs sm:text-sm">{pendingAgentAction.match.awayTeam}</span>
                    </div>
                    {pendingAgentAction.match.completed && pendingAgentAction.match.homeScore !== undefined && pendingAgentAction.match.awayScore !== undefined && (
                      <div className="flex justify-center mb-2 text-xs sm:text-sm">
                        <span className="font-bold">{pendingAgentAction.match.homeScore}</span>
                        <span className="mx-2">-</span>
                        <span className="font-bold">{pendingAgentAction.match.awayScore}</span>
                      </div>
                    )}
                    <div className="text-[10px] sm:text-xs space-y-1 text-gray-600">
                      {pendingAgentAction.match.date && (
                        <div className="flex items-center">
                          <Calendar className="h-2.5 w-2.5 sm:h-3 sm:w-3 mr-1" />
                          {pendingAgentAction.match.date}
                        </div>
                      )}
                      {pendingAgentAction.match.time && (
                        <div className="flex items-center">
                          <Clock className="h-2.5 w-2.5 sm:h-3 sm:w-3 mr-1" />
                          {pendingAgentAction.match.time}
                        </div>
                      )}
                      {pendingAgentAction.match.venue && (
                        <div className="flex items-center">
                          <MapPin className="h-2.5 w-2.5 sm:h-3 sm:w-3 mr-1" />
                          {pendingAgentAction.match.venue}
                        </div>
                      )}
                      {pendingAgentAction.match.competition && (
                        <div className="flex items-center">
                          <Trophy className="h-2.5 w-2.5 sm:h-3 sm:w-3 mr-1" />
                          {pendingAgentAction.match.competition}
                        </div>
                      )}
                      {pendingAgentAction.match.notes && (
                        <div className="flex items-start mt-1 pt-1 border-t border-gray-100">
                          <span className="text-[10px] sm:text-xs text-gray-500">Ghi ch√∫:</span>
                          <span className="text-[10px] sm:text-xs ml-1">{pendingAgentAction.match.notes}</span>
                        </div>
                      )}
                    </div>
                  </div>
                </div>
              ) : (
                <p className="text-xs sm:text-sm mb-3 font-medium">{getActionDescription(pendingAgentAction)}</p>
              )}

              <div className="flex space-x-2">
                <Button
                  size="sm"
                  variant="outline"
                  className="w-full text-xs sm:text-sm"
                  onClick={() => setPendingAgentAction(null)}
                >
                  H·ªßy
                </Button>
                <Button
                  size="sm"
                  className="w-full bg-purple-600 hover:bg-purple-700 text-white font-medium text-xs sm:text-sm"
                  onClick={() => executeAgentAction(pendingAgentAction)}
                >
                  X√°c nh·∫≠n th·ª±c hi·ªán
                </Button>
              </div>
            </div>
          )}

          {/* Image preview */}
          {uploadedImage && (
            <div className="p-3 sm:p-4 border-t bg-white">
              <div className="relative">
                <img
                  src={uploadedImage}
                  alt="Uploaded image"
                  className="w-full h-auto max-h-[100px] sm:max-h-[150px] object-contain rounded-lg border"
                />
                <Button
                  variant="ghost"
                  size="sm"
                  className="absolute top-1 right-1 h-5 w-5 sm:h-6 sm:w-6 p-0 bg-white/80 rounded-full"
                  onClick={handleRemoveImage}
                >
                  <X className="h-2.5 w-2.5 sm:h-3 sm:w-3" />
                </Button>
              </div>
            </div>
          )}

          {/* Input area */}
          <div className="p-3 sm:p-4 border-t bg-white">
            <div className="flex flex-wrap gap-2 mb-2">
              <Button
                variant="outline"
                size="sm"
                className="flex items-center text-xs h-7 sm:h-8"
                onClick={() => fileInputRef.current?.click()}
              >
                <Image className="h-3 w-3 sm:h-4 sm:w-4 mr-1" />
                G·ª≠i ·∫£nh
              </Button>
              <Button
                variant="outline"
                size="sm"
                className="flex items-center text-xs h-7 sm:h-8"
                onClick={() => setIsChatDialogOpen(true)}
              >
                <Bot className="h-3 w-3 sm:h-4 sm:w-4 mr-1" />
                Chat AI
              </Button>
              <Button
                variant="outline"
                size="sm"
                className="flex items-center text-xs h-7 sm:h-8"
                onClick={() => {
                  setCurrentInputType('ai');
                  setShowTranslationPanel(!showTranslationPanel);
                }}
                title="D·ªãch vƒÉn b·∫£n"
              >
                <Languages className="h-3 w-3 sm:h-4 sm:w-4 mr-1" />
                D·ªãch
              </Button>
              <Button
                variant={isListening ? "secondary" : "outline"}
                size="sm"
                className={`flex items-center text-xs h-7 sm:h-8 ${isListening ? "bg-red-100 border-red-300 text-red-600" : ""}`}
                onClick={toggleListening}
              >
                <Mic className={`h-3 w-3 sm:h-4 sm:w-4 mr-1 ${isListening ? "animate-pulse text-red-500" : ""}`} />
                {isListening ? "Listen..." : ""}
              </Button>
              <input
                type="file"
                ref={fileInputRef}
                accept="image/*"
                className="hidden"
                onChange={handleFileChange}
              />
            </div>
            {/* Show interim transcript when listening */}
            {isListening && interimTranscript && (
              <div className="mb-2 p-2 bg-blue-50 rounded-md text-blue-700 text-sm italic">
                <div className="flex items-center">
                  <div className="w-2 h-2 bg-red-500 rounded-full animate-ping mr-2"></div>
                  <span>ƒêang nghe: </span>
                </div>
                {interimTranscript}...
              </div>
            )}

            {/* Speech recognition error for input area */}
            {recognitionError && !isListening && (
              <div className="mb-2 p-2 bg-red-50 rounded-md text-red-700 text-sm">
                <div className="flex items-center">
                  <Mic className="h-3 w-3 sm:h-4 sm:w-4 mr-1 sm:mr-2 text-red-500" />
                  {recognitionError}
                </div>
              </div>
            )}

            <div className="flex flex-col space-y-2">
              {/* Translation Panel */}
              {showTranslationPanel && (
                <div className="border rounded-lg p-3 bg-gray-50 space-y-3">
                  <div className="flex items-center justify-between">
                    <div className="flex items-center space-x-2">
                      <Languages className="h-4 w-4 text-blue-600" />
                      <span className="text-sm font-medium">D·ªãch vƒÉn b·∫£n</span>
                    </div>
                    <Button
                      variant="ghost"
                      size="sm"
                      className="h-6 w-6 p-0"
                      onClick={() => setShowTranslationPanel(false)}
                    >
                      <X className="h-3 w-3" />
                    </Button>
                  </div>

                  <div className="grid grid-cols-2 gap-2">
                    <div className="space-y-1">
                      <Label className="text-xs">T·ª´ ng√¥n ng·ªØ</Label>
                      <Select value={sourceLanguage} onValueChange={setSourceLanguage}>
                        <SelectTrigger className="h-8 text-xs">
                          <SelectValue />
                        </SelectTrigger>
                        <SelectContent>
                          {translationLanguages.map((lang) => (
                            <SelectItem key={lang.code} value={lang.code}>
                              <div className="flex items-center">
                                <span className="mr-2">{lang.flag}</span>
                                {lang.name}
                              </div>
                            </SelectItem>
                          ))}
                        </SelectContent>
                      </Select>
                    </div>

                    <div className="space-y-1">
                      <Label className="text-xs">Sang ng√¥n ng·ªØ</Label>
                      <Select value={targetLanguage} onValueChange={setTargetLanguage}>
                        <SelectTrigger className="h-8 text-xs">
                          <SelectValue />
                        </SelectTrigger>
                        <SelectContent>
                          {translationLanguages.filter(lang => lang.code !== "auto").map((lang) => (
                            <SelectItem key={lang.code} value={lang.code}>
                              <div className="flex items-center">
                                <span className="mr-2">{lang.flag}</span>
                                {lang.name}
                              </div>
                            </SelectItem>
                          ))}
                        </SelectContent>
                      </Select>
                    </div>
                  </div>

                  <div className="flex space-x-2">
                    <Button
                      size="sm"
                      className="h-7 text-xs"
                      onClick={() => {
                        const textToTranslate = currentInputType === 'ai' ? aiQuestion : chatDialogQuestion;
                        if (textToTranslate.trim()) {
                          translateText(textToTranslate, sourceLanguage, targetLanguage);
                        }
                      }}
                      disabled={isTranslating || (!aiQuestion.trim() && !chatDialogQuestion.trim())}
                    >
                      {isTranslating ? "ƒêang d·ªãch..." : "D·ªãch"}
                    </Button>
                  </div>

                  {translationError && (
                    <div className="text-xs text-red-600 bg-red-50 p-2 rounded">
                      {translationError}
                    </div>
                  )}

                  {translatedText && (
                    <div className="space-y-2">
                      <div className="text-xs text-gray-600">K·∫øt qu·∫£ d·ªãch:</div>
                      <div className="bg-white p-2 rounded border text-sm">
                        {translatedText}
                      </div>
                      <div className="flex space-x-2">
                        <Button
                          size="sm"
                          variant="outline"
                          className="h-7 text-xs"
                          onClick={() => {
                            if (currentInputType === 'ai') {
                              setAiQuestion(translatedText);
                            } else {
                              setChatDialogQuestion(translatedText);
                            }
                            setShowTranslationPanel(false);
                          }}
                        >
                          <RotateCcw className="h-3 w-3 mr-1" />
                          Thay th·∫ø
                        </Button>
                        <Button
                          size="sm"
                          variant="outline"
                          className="h-7 text-xs"
                          onClick={() => {
                            navigator.clipboard.writeText(translatedText);
                          }}
                        >
                          Sao ch√©p
                        </Button>
                      </div>
                    </div>
                  )}
                </div>
              )}

              <div className="relative">
                <Textarea
                placeholder="H·ªèi AI v·ªÅ l·ªãch thi ƒë·∫•u, ƒë·ªôi b√≥ng, ho·∫∑c th√¥ng tin b√≥ng ƒë√°..."
                value={aiQuestion}
                  onChange={(e) => {
                    const text = e.target.value;
                    // Gi·ªõi h·∫°n s·ªë t·ª´ (kho·∫£ng 1000 t·ª´ ~ 6000 k√Ω t·ª±)
                    const wordCount = text.trim().split(/\s+/).length;
                    if (wordCount <= 1000) {
                      setAiQuestion(text);
                    }
                  }}
                  onKeyDown={(e) => {
                    if (e.key === "Enter" && e.ctrlKey) {
                      e.preventDefault();
                      askAI();
                    } else if (e.key === "t" && e.ctrlKey) {
                      e.preventDefault();
                      setCurrentInputType('ai');
                      setShowTranslationPanel(!showTranslationPanel);
                    }
                  }}
                disabled={isAiLoading}
                  className={`min-h-[60px] sm:min-h-[80px] resize-y max-h-[150px] sm:max-h-[200px] text-xs sm:text-sm ${isListening ? "border-blue-300 focus-visible:ring-blue-400" : ""}`}
                />
                {aiQuestion && (
                  <div className="absolute bottom-2 right-2 text-xs text-gray-500 bg-white/80 px-1 rounded">
                    {aiQuestion.trim().split(/\s+/).length}/1000 t·ª´
                  </div>
                )}
              </div>
              <div className="flex justify-between items-center">
                <div className="text-[10px] sm:text-xs text-gray-500 hidden sm:block">
                  <kbd className="px-1 py-0.5 border rounded">Ctrl</kbd> + <kbd className="px-1 py-0.5 border rounded">Enter</kbd> ƒë·ªÉ g·ª≠i ‚Ä¢
                  <kbd className="px-1 py-0.5 border rounded">Ctrl</kbd> + <kbd className="px-1 py-0.5 border rounded">T</kbd> ƒë·ªÉ d·ªãch
                </div>
                <Button onClick={askAI} disabled={isAiLoading} className="ml-auto text-xs sm:text-sm h-7 sm:h-8">
                  <Send className="h-3 w-3 sm:h-4 sm:w-4 mr-1" />
                  G·ª≠i
              </Button>
              </div>
            </div>
          </div>
        </div>
      )}

      {/* Dialog x√°c nh·∫≠n x√≥a */}
      <ConfirmDeleteDialog
        open={isDeleteDialogOpen}
        onOpenChange={setIsDeleteDialogOpen}
        title="X√°c nh·∫≠n x√≥a tr·∫≠n ƒë·∫•u"
        description="B·∫°n c√≥ ch·∫Øc ch·∫Øn mu·ªën x√≥a tr·∫≠n ƒë·∫•u n√†y? H√†nh ƒë·ªông n√†y kh√¥ng th·ªÉ ho√†n t√°c."
        onConfirm={confirmDeleteMatch}
      />

      {/* ChatAI Dialog */}
      <Dialog open={isChatDialogOpen} onOpenChange={setIsChatDialogOpen}>
        <DialogContent className="max-w-[95vw] sm:max-w-lg h-[90vh] sm:h-[80vh] flex flex-col">
          <DialogHeader>
            <DialogTitle className="flex items-center justify-between">
              <div className="flex items-center">
                <Bot className="h-5 w-5 mr-2" />
                Chat v·ªõi AI
              </div>
              <div className="flex items-center">
                <Button
                  variant="ghost"
                  size="sm"
                  className="h-8 w-8 p-0 mr-2"
                  onClick={toggleVoiceSettings}
                  title="C√†i ƒë·∫∑t gi·ªçng n√≥i"
                >
                  <Settings className="h-4 w-4" />
                </Button>
              <Button
                variant="ghost"
                size="sm"
                className="h-8 w-8 p-0"
                onClick={() => setIsSpeechEnabled(!isSpeechEnabled)}
                title={isSpeechEnabled ? "T·∫Øt ph√°t √¢m" : "B·∫≠t ph√°t √¢m"}
              >
                {isSpeechEnabled ? <Volume2 className="h-4 w-4" /> : <VolumeX className="h-4 w-4" />}
              </Button>
              </div>
            </DialogTitle>
            <DialogDescription className="text-xs sm:text-sm">
              S·ª≠ d·ª•ng API key m·∫∑c ƒë·ªãnh ho·∫∑c nh·∫≠p API key c·ªßa b·∫°n ƒë·ªÉ tr√≤ chuy·ªán v·ªõi AI
            </DialogDescription>
          </DialogHeader>

          <div className="flex items-center space-x-2 mb-4">
            <Switch
              id="useCustomKey"
              checked={useCustomApiKey}
              onCheckedChange={setUseCustomApiKey}
            />
            <Label htmlFor="useCustomKey" className="text-xs sm:text-sm">S·ª≠ d·ª•ng API key c·ªßa ri√™ng t√¥i</Label>
          </div>

          {useCustomApiKey && (
            <div className="space-y-2 mb-4">
              <Label htmlFor="apiKey" className="text-xs sm:text-sm">API Key (Gemini API)</Label>
              <Input
                id="apiKey"
                value={customApiKey}
                onChange={(e) => setCustomApiKey(e.target.value)}
                placeholder="Nh·∫≠p API key c·ªßa b·∫°n"
                type="password"
              />
            </div>
          )}

          {/* Chat history */}
          <div className="flex-1 overflow-hidden">
            <ScrollArea className="h-full pr-2 sm:pr-4 border rounded-md p-2 sm:p-4">
              <div className="space-y-3 sm:space-y-4">
                {chatMessages.length === 0 ? (
                  <div className="text-center text-gray-500 py-6 sm:py-8">
                    <Bot className="h-10 w-10 sm:h-12 sm:w-12 mx-auto mb-2" />
                    <p className="text-xs sm:text-sm">H√£y ƒë·∫∑t c√¢u h·ªèi ƒë·ªÉ b·∫Øt ƒë·∫ßu tr√≤ chuy·ªán v·ªõi AI.</p>
                  </div>
                ) : (
                  chatMessages.map((msg) => (
                    <div
                      key={msg.id}
                      className={`relative ${
                        msg.role === 'user'
                          ? 'bg-blue-100 ml-auto'
                          : msg.role === 'agent'
                            ? 'bg-purple-100 border border-purple-200'
                            : 'bg-gray-100'
                      } rounded-lg p-2 sm:p-3 max-w-[95%] ${msg.role === 'user' ? 'text-right' : 'text-left'}`}
                    >
                      <div
                        className="whitespace-pre-line text-xs sm:text-sm"
                        dangerouslySetInnerHTML={{ __html: msg.content }}
                      />

                      {/* Emoji reactions */}
                      {msg.reactions && Object.keys(msg.reactions).length > 0 && (
                        <div className="flex flex-wrap gap-1 mt-2">
                          {Object.values(msg.reactions).map((reaction) => (
                            <span
                              key={reaction.emoji}
                              className={cn(
                                "inline-flex items-center rounded-full border bg-white px-1.5 py-0.5 text-xs",
                                Date.now() - reaction.timestamp < 3000 && "animate-bounce"
                              )}
                              title={`${reaction.count} ${reaction.count > 1 ? 'reactions' : 'reaction'}`}
                            >
                              {reaction.emoji} {reaction.count > 1 && reaction.count}
                            </span>
                          ))}
                        </div>
                      )}

                      {/* Add reaction button */}
                      <div className="absolute bottom-1 right-1">
                        <Popover open={showingEmojiFor === msg.id} onOpenChange={(open) => {
                          if (open) setShowingEmojiFor(msg.id);
                          else setShowingEmojiFor(null);
                        }}>
                          <PopoverTrigger asChild>
                            <Button
                              variant="ghost"
                              size="sm"
                              className="h-5 w-5 sm:h-6 sm:w-6 p-0 rounded-full opacity-50 hover:opacity-100"
                            >
                              <Smile className="h-2.5 w-2.5 sm:h-3 sm:w-3" />
                            </Button>
                          </PopoverTrigger>
                          <PopoverContent className="w-auto p-1" align="end">
                            <div className="flex space-x-1">
                              {availableEmojis.map((emoji) => (
                                <button
                                  key={emoji}
                                  className="hover:bg-muted p-1.5 sm:p-2 rounded-full transition-colors"
                                  onClick={() => addReaction(msg.id, emoji)}
                                >
                                  <span className="text-base sm:text-lg">{emoji}</span>
                                </button>
                              ))}
                            </div>
                          </PopoverContent>
                        </Popover>
                      </div>
                    </div>
                  ))
                )}
                {isAiLoading && (
                  <div className="bg-gray-100 rounded-lg p-2 sm:p-3 max-w-[90%]">
                    <div className="flex items-center space-x-2">
                      <div className="w-2 h-2 bg-blue-500 rounded-full animate-bounce" style={{ animationDelay: '0s' }}></div>
                      <div className="w-2 h-2 bg-blue-500 rounded-full animate-bounce" style={{ animationDelay: '0.2s' }}></div>
                      <div className="w-2 h-2 bg-blue-500 rounded-full animate-bounce" style={{ animationDelay: '0.4s' }}></div>
                    </div>
                  </div>
                )}
              </div>
            </ScrollArea>
          </div>

          {/* Voice notification for chat dialog */}
          {showVoiceNotification && voiceNotification && (
            <div className="relative py-2">
              <div
                className="bg-black/80 text-white px-3 sm:px-4 py-2 sm:py-2.5 rounded-md shadow-lg text-xs sm:text-sm flex items-center"
                style={{
                  animation: "fadeInOut 3s ease-in-out forwards",
                }}
              >
                <Volume2 className="h-3 w-3 sm:h-4 sm:w-4 mr-1 sm:mr-2 text-blue-400" />
                <div dangerouslySetInnerHTML={{ __html: voiceNotification }}></div>
              </div>
            </div>
          )}

          {/* Translation Panel for Chat Dialog */}
          {showTranslationPanel && currentInputType === 'chat' && (
            <div className="border rounded-lg p-3 bg-gray-50 space-y-3 mb-3">
              <div className="flex items-center justify-between">
                <div className="flex items-center space-x-2">
                  <Languages className="h-4 w-4 text-blue-600" />
                  <span className="text-sm font-medium">D·ªãch vƒÉn b·∫£n</span>
                </div>
                <Button
                  variant="ghost"
                  size="sm"
                  className="h-6 w-6 p-0"
                  onClick={() => setShowTranslationPanel(false)}
                >
                  <X className="h-3 w-3" />
                </Button>
              </div>

              <div className="grid grid-cols-2 gap-2">
                <div className="space-y-1">
                  <Label className="text-xs">T·ª´ ng√¥n ng·ªØ</Label>
                  <Select value={sourceLanguage} onValueChange={setSourceLanguage}>
                    <SelectTrigger className="h-8 text-xs">
                      <SelectValue />
                    </SelectTrigger>
                    <SelectContent>
                      {translationLanguages.map((lang) => (
                        <SelectItem key={lang.code} value={lang.code}>
                          <div className="flex items-center">
                            <span className="mr-2">{lang.flag}</span>
                            {lang.name}
                          </div>
                        </SelectItem>
                      ))}
                    </SelectContent>
                  </Select>
                </div>

                <div className="space-y-1">
                  <Label className="text-xs">Sang ng√¥n ng·ªØ</Label>
                  <Select value={targetLanguage} onValueChange={setTargetLanguage}>
                    <SelectTrigger className="h-8 text-xs">
                      <SelectValue />
                    </SelectTrigger>
                    <SelectContent>
                      {translationLanguages.filter(lang => lang.code !== "auto").map((lang) => (
                        <SelectItem key={lang.code} value={lang.code}>
                          <div className="flex items-center">
                            <span className="mr-2">{lang.flag}</span>
                            {lang.name}
                          </div>
                        </SelectItem>
                      ))}
                    </SelectContent>
                  </Select>
                </div>
              </div>

              <div className="flex space-x-2">
                <Button
                  size="sm"
                  className="h-7 text-xs"
                  onClick={() => {
                    const textToTranslate = currentInputType === 'chat' ? chatDialogQuestion : aiQuestion;
                    if (textToTranslate.trim()) {
                      translateText(textToTranslate, sourceLanguage, targetLanguage);
                    }
                  }}
                  disabled={isTranslating || (!chatDialogQuestion.trim() && !aiQuestion.trim())}
                >
                  {isTranslating ? "ƒêang d·ªãch..." : "D·ªãch"}
                </Button>
              </div>

              {translationError && (
                <div className="text-xs text-red-600 bg-red-50 p-2 rounded">
                  {translationError}
                </div>
              )}

              {translatedText && (
                <div className="space-y-2">
                  <div className="text-xs text-gray-600">K·∫øt qu·∫£ d·ªãch:</div>
                  <div className="bg-white p-2 rounded border text-sm">
                    {translatedText}
                  </div>
                  <div className="flex space-x-2">
                    <Button
                      size="sm"
                      variant="outline"
                      className="h-7 text-xs"
                      onClick={() => {
                        setChatDialogQuestion(translatedText);
                        setShowTranslationPanel(false);
                      }}
                    >
                      <RotateCcw className="h-3 w-3 mr-1" />
                      Thay th·∫ø
                    </Button>
                    <Button
                      size="sm"
                      variant="outline"
                      className="h-7 text-xs"
                      onClick={() => {
                        navigator.clipboard.writeText(translatedText);
                      }}
                    >
                      Sao ch√©p
                    </Button>
                  </div>
                </div>
              )}
            </div>
          )}

          {/* Input area */}
          <div className="mt-3 sm:mt-4 flex space-x-2">
            <div className="flex-grow relative">
              {isListening && (
                <div className="absolute -top-10 left-0 right-0 p-2 bg-blue-50 rounded-md text-blue-700 text-xs sm:text-sm italic">
                  <div className="flex items-center">
                    <div className="w-2 h-2 bg-red-500 rounded-full animate-ping mr-2"></div>
                    <span>ƒêang nghe: </span>
                  </div>
                  {interimTranscript ? interimTranscript + "..." : "H√£y n√≥i v√†o microphone..."}
                </div>
              )}

              {/* Speech recognition error for dialog */}
              {recognitionError && !isListening && (
                <div className="absolute -top-10 left-0 right-0 p-2 bg-red-50 rounded-md text-red-700 text-xs sm:text-sm">
                  <div className="flex items-center">
                    <Mic className="h-3 w-3 sm:h-4 sm:w-4 mr-1 sm:mr-2 text-red-500" />
                    {recognitionError}
                  </div>
                </div>
              )}

              <Textarea
                placeholder="Nh·∫≠p c√¢u h·ªèi c·ªßa b·∫°n (t·ªëi ƒëa 1000 t·ª´)"
              value={chatDialogQuestion}
                onChange={(e) => {
                  const text = e.target.value;
                  // Gi·ªõi h·∫°n s·ªë t·ª´ (~1000 t·ª´)
                  const wordCount = text.trim().split(/\s+/).length;
                  if (wordCount <= 1000) {
                    setChatDialogQuestion(text);
                  }
                }}
                onKeyDown={(e) => {
                  if (e.key === "Enter" && e.ctrlKey) {
                    e.preventDefault();
                    handleChatDialogQuestion();
                  } else if (e.key === "t" && e.ctrlKey) {
                    e.preventDefault();
                    setCurrentInputType('chat');
                    setShowTranslationPanel(!showTranslationPanel);
                  }
                }}
              disabled={isAiLoading}
                className={`min-h-[50px] sm:min-h-[60px] resize-y max-h-[100px] sm:max-h-[150px] text-xs sm:text-sm ${isListening ? "border-blue-300 focus-visible:ring-blue-400" : ""}`}
              />
              {chatDialogQuestion && (
                <div className="absolute bottom-2 right-2 text-xs text-gray-500 bg-white/80 px-1 rounded z-10">
                  {chatDialogQuestion.trim().split(/\s+/).length}/1000 t·ª´
                </div>
              )}
            </div>
            <div className="flex flex-col space-y-1">
              <Button
                variant="outline"
                size="sm"
                className="h-8 w-8 p-0"
                onClick={() => {
                  setCurrentInputType('chat');
                  setShowTranslationPanel(!showTranslationPanel);
                }}
                title="D·ªãch vƒÉn b·∫£n"
              >
                <Languages className="h-4 w-4" />
              </Button>
              <Button
                variant={isListening ? "secondary" : "outline"}
                size="sm"
                className={`h-8 w-8 p-0 ${isListening ? "bg-red-100 border-red-300 text-red-600" : ""}`}
                onClick={toggleListening}
              >
                <Mic className={`h-4 w-4 ${isListening ? "animate-pulse text-red-500" : ""}`} />
              </Button>
              <div className="text-[10px] sm:text-xs text-center text-gray-500">
                {isListening ? "D·ª´ng" : "N√≥i"}
              </div>
            </div>
            <Button
              onClick={handleChatDialogQuestion}
              disabled={isAiLoading || !chatDialogQuestion.trim()}
              title="Ctrl+Enter ƒë·ªÉ g·ª≠i"
              className="text-xs sm:text-sm"
            >
              <Send className="h-3 w-3 sm:h-4 sm:w-4 mr-1" /> G·ª≠i
            </Button>
          </div>
        </DialogContent>
      </Dialog>

      <Dialog open={isDialogOpen} onOpenChange={setIsDialogOpen}>
        <DialogContent className="max-w-[95vw] sm:max-w-md">
          <DialogHeader>
            <DialogTitle>
              {editingMatch?.id.includes("match-") ? "Th√™m tr·∫≠n ƒë·∫•u m·ªõi" : "Ch·ªânh s·ª≠a tr·∫≠n ƒë·∫•u"}
            </DialogTitle>
          </DialogHeader>
          {editingMatch && (
            <div className="space-y-3 sm:space-y-4">
              <div className="grid grid-cols-2 gap-2 sm:gap-4">
                <div className="space-y-1 sm:space-y-2">
                  <Label htmlFor="homeTeam" className="text-xs sm:text-sm">ƒê·ªôi nh√†</Label>
                  <Input
                    id="homeTeam"
                    value={editingMatch.homeTeam}
                    onChange={(e) => setEditingMatch({ ...editingMatch, homeTeam: e.target.value })}
                    placeholder="T√™n ƒë·ªôi nh√†"
                    className="text-xs sm:text-sm"
                  />
                </div>
                <div className="space-y-1 sm:space-y-2">
                  <Label htmlFor="awayTeam" className="text-xs sm:text-sm">ƒê·ªôi kh√°ch</Label>
                  <Input
                    id="awayTeam"
                    value={editingMatch.awayTeam}
                    onChange={(e) => setEditingMatch({ ...editingMatch, awayTeam: e.target.value })}
                    placeholder="T√™n ƒë·ªôi kh√°ch"
                    className="text-xs sm:text-sm"
                  />
                </div>
              </div>

              <div className="grid grid-cols-2 gap-2 sm:gap-4">
                <div className="space-y-1 sm:space-y-2">
                  <Label htmlFor="date" className="text-xs sm:text-sm">Ng√†y thi ƒë·∫•u</Label>
                  <Input
                    id="date"
                    type="date"
                    value={editingMatch.date}
                    onChange={(e) => setEditingMatch({ ...editingMatch, date: e.target.value })}
                    className="text-xs sm:text-sm"
                  />
                </div>
                <div className="space-y-1 sm:space-y-2">
                  <Label htmlFor="time" className="text-xs sm:text-sm">Gi·ªù thi ƒë·∫•u</Label>
                  <Input
                    id="time"
                    type="time"
                    value={editingMatch.time}
                    onChange={(e) => setEditingMatch({ ...editingMatch, time: e.target.value })}
                    className="text-xs sm:text-sm"
                  />
                </div>
              </div>

              <div className="space-y-1 sm:space-y-2">
                <Label htmlFor="venue" className="text-xs sm:text-sm">ƒê·ªãa ƒëi·ªÉm</Label>
                <Input
                  id="venue"
                  value={editingMatch.venue}
                  onChange={(e) => setEditingMatch({ ...editingMatch, venue: e.target.value })}
                  placeholder="S√¢n v·∫≠n ƒë·ªông"
                  className="text-xs sm:text-sm"
                />
              </div>

              <div className="space-y-1 sm:space-y-2">
                <Label htmlFor="competition" className="text-xs sm:text-sm">Gi·∫£i ƒë·∫•u</Label>
                <Select
                  value={editingMatch.competition}
                  onValueChange={(value) => setEditingMatch({ ...editingMatch, competition: value })}
                >
                  <SelectTrigger id="competition" className="text-xs sm:text-sm">
                    <SelectValue placeholder="Ch·ªçn gi·∫£i ƒë·∫•u" />
                  </SelectTrigger>
                  <SelectContent>
                    <SelectItem value="V-League">V-League</SelectItem>
                    <SelectItem value="C√∫p Qu·ªëc Gia">C√∫p Qu·ªëc Gia</SelectItem>
                    <SelectItem value="AFC Champions League">AFC Champions League</SelectItem>
                    <SelectItem value="Giao h·ªØu">Giao h·ªØu</SelectItem>
                    <SelectItem value="Ngo·∫°i h·∫°ng Anh">Ngo·∫°i h·∫°ng Anh</SelectItem>
                    <SelectItem value="Champions League">Champions League</SelectItem>
                    <SelectItem value="World Cup">World Cup</SelectItem>
                  </SelectContent>
                </Select>
              </div>

              <div className="flex items-center space-x-2">
                <Switch
                  id="completed"
                  checked={editingMatch.completed}
                  onCheckedChange={(checked) => setEditingMatch({ ...editingMatch, completed: checked })}
                />
                <Label htmlFor="completed" className="text-xs sm:text-sm">ƒê√£ k·∫øt th√∫c</Label>
              </div>

              {editingMatch.completed && (
                <div className="grid grid-cols-2 gap-2 sm:gap-4">
                  <div className="space-y-1 sm:space-y-2">
                    <Label htmlFor="homeScore" className="text-xs sm:text-sm">B√†n th·∫Øng ƒë·ªôi nh√†</Label>
                    <Input
                      id="homeScore"
                      type="number"
                      min={0}
                      value={editingMatch.homeScore || 0}
                      onChange={(e) =>
                        setEditingMatch({ ...editingMatch, homeScore: Number.parseInt(e.target.value) || 0 })
                      }
                      className="text-xs sm:text-sm"
                    />
                  </div>
                  <div className="space-y-1 sm:space-y-2">
                    <Label htmlFor="awayScore" className="text-xs sm:text-sm">B√†n th·∫Øng ƒë·ªôi kh√°ch</Label>
                    <Input
                      id="awayScore"
                      type="number"
                      min={0}
                      value={editingMatch.awayScore || 0}
                      onChange={(e) =>
                        setEditingMatch({ ...editingMatch, awayScore: Number.parseInt(e.target.value) || 0 })
                      }
                      className="text-xs sm:text-sm"
                    />
                  </div>
                </div>
              )}

              <div className="space-y-1 sm:space-y-2">
                <Label htmlFor="notes" className="text-xs sm:text-sm">Ghi ch√∫</Label>
                <Textarea
                  id="notes"
                  value={editingMatch.notes || ""}
                  onChange={(e) => setEditingMatch({ ...editingMatch, notes: e.target.value })}
                  placeholder="Th√¥ng tin th√™m v·ªÅ tr·∫≠n ƒë·∫•u"
                  rows={3}
                  className="text-xs sm:text-sm"
                />
              </div>

              <div className="flex justify-end space-x-2 pt-2">
                <Button variant="outline" onClick={() => setIsDialogOpen(false)} className="text-xs sm:text-sm">
                  H·ªßy
                </Button>
                <Button onClick={handleSaveMatch} className="text-xs sm:text-sm">L∆∞u</Button>
              </div>
            </div>
          )}
        </DialogContent>
      </Dialog>

      {/* Player Rating Dialog */}
      {ratingMatch && (
        <PlayerRating
          match={ratingMatch}
          homeTeam={homeTeam}
          awayTeam={awayTeam}
          open={isRatingDialogOpen}
          onOpenChange={setIsRatingDialogOpen}
          onSaveRatings={handleSaveRatings}
        />
      )}

      {/* Match Events Dialog */}
      {eventsMatch && (
        <MatchEvents
          match={eventsMatch}
          homeTeam={homeTeam}
          awayTeam={awayTeam}
          open={isEventsDialogOpen}
          onOpenChange={setIsEventsDialogOpen}
          onSaveEvents={handleSaveEvents}
        />
      )}

      {/* Voice Settings Dialog */}
      <Dialog open={isVoiceSettingsOpen} onOpenChange={setIsVoiceSettingsOpen}>
        <DialogContent className="max-w-[95vw] sm:max-w-md max-h-[90vh] overflow-y-auto">
          <DialogHeader>
            <DialogTitle className="flex items-center text-base sm:text-lg">
              <Volume2 className="h-4 w-4 sm:h-5 sm:w-5 mr-2" />
              C√†i ƒë·∫∑t gi·ªçng n√≥i
            </DialogTitle>
            <DialogDescription className="text-xs sm:text-sm">
              ƒêi·ªÅu ch·ªânh c√°c tham s·ªë ƒë·ªÉ c√≥ gi·ªçng n√≥i d·ªÖ nghe nh·∫•t
            </DialogDescription>
          </DialogHeader>
          <div className="space-y-3 sm:space-y-4 py-2 text-xs sm:text-sm">
            {/* Auto Detect Language */}
            <div className="flex items-center space-x-2 pt-2">
              <Switch
                id="auto-detect"
                checked={autoDetectLanguage}
                onCheckedChange={(checked) => {
                  setAutoDetectLanguage(checked);
                  // Khi b·∫≠t auto detect, t·ª± ƒë·ªông ch·ªçn "auto" cho selectedLanguage
                  if (checked) {
                    setSelectedLanguage("auto");
                  }
                }}
              />
              <div>
                <Label htmlFor="auto-detect">T·ª± ƒë·ªông nh·∫≠n d·∫°ng ng√¥n ng·ªØ</Label>
                <p className="text-sm text-gray-500">
                  T·ª± ƒë·ªông ph√°t hi·ªán v√† s·ª≠ d·ª•ng gi·ªçng n√≥i ph√π h·ª£p v·ªõi ng√¥n ng·ªØ vƒÉn b·∫£n
                </p>
              </div>
            </div>

            {/* Language Selection */}
            <div className="space-y-2">
              <Label htmlFor="language" className="flex items-center">
                <Globe className="h-4 w-4 mr-2" /> Ng√¥n ng·ªØ ƒë·ªçc
              </Label>
              <Select
                value={selectedLanguage}
                onValueChange={(value) => {
                  setSelectedLanguage(value);

                  // When changing language, try to set a recommended voice
                  if (!autoDetectLanguage) {
                    const bestVoice = getBestVoiceForLanguage(value);
                    if (bestVoice) {
                      setSelectedVoice(bestVoice);
                    }
                  }
                }}
                disabled={autoDetectLanguage}
              >
                <SelectTrigger id="language" className={autoDetectLanguage ? "opacity-50" : ""}>
                  <SelectValue placeholder="Ch·ªçn ng√¥n ng·ªØ" />
                </SelectTrigger>
                <SelectContent className="max-h-[300px]">
                  {supportedLanguages.map((lang) => (
                    <SelectItem key={lang.code} value={lang.code} className="flex items-center">
                      <div className="flex items-center">
                        <span className="mr-2">{lang.flag}</span>
                        {lang.name}
                      </div>
                    </SelectItem>
                  ))}
                </SelectContent>
              </Select>
              {autoDetectLanguage && (
                <div className="text-xs text-blue-500 mt-1 flex items-center">
                  <span className="bg-blue-100 p-1 rounded-full mr-1">üîç</span>
                  H·ªá th·ªëng s·∫Ω t·ª± ƒë·ªông ph√°t hi·ªán v√† s·ª≠ d·ª•ng ng√¥n ng·ªØ ph√π h·ª£p nh·∫•t
                </div>
              )}
            </div>

            {/* Speech Recognition Language */}
            <div className="space-y-2 pt-2 border-t border-gray-200">
              <Label className="font-bold flex items-center text-base">
                <Mic className="h-4 w-4 mr-2" /> Nh·∫≠n d·∫°ng gi·ªçng n√≥i
              </Label>

              <div className="mt-2">
                <Label htmlFor="recognitionLanguage" className="flex items-center text-sm mb-1">
                  Ng√¥n ng·ªØ nh·∫≠n d·∫°ng
                </Label>
                <div className="grid grid-cols-2 gap-2 mb-2">
                  <Button
                    type="button"
                    variant={recognitionLang === "vi-VN" ? "default" : "outline"}
                    className="justify-start w-full"
                    onClick={() => setRecognitionLanguage("vi-VN")}
                  >
                    <span className="mr-2">üáªüá≥</span> Ti·∫øng Vi·ªát
                  </Button>
                  <Button
                    type="button"
                    variant={recognitionLang === "en-US" ? "default" : "outline"}
                    className="justify-start w-full"
                    onClick={() => setRecognitionLanguage("en-US")}
                  >
                    <span className="mr-2">üá∫üá∏</span> English
                  </Button>
                </div>

                <Select
                  value={recognitionLang}
                  onValueChange={(value) => setRecognitionLanguage(value)}
                >
                  <SelectTrigger id="recognitionLanguage">
                    <SelectValue placeholder="Ch·ªçn ng√¥n ng·ªØ kh√°c" />
                  </SelectTrigger>
                  <SelectContent className="max-h-[300px]">
                    {supportedLanguages
                      .filter(lang => lang.code !== "auto" && lang.code !== "vi-VN" && lang.code !== "en-US")
                      .map((lang) => (
                        <SelectItem key={`recog-${lang.code}`} value={lang.code} className="flex items-center">
                          <div className="flex items-center">
                            <span className="mr-2">{lang.flag}</span>
                            {lang.name}
                          </div>
                        </SelectItem>
                      ))
                    }
                  </SelectContent>
                </Select>

                <div className="text-xs text-gray-700 mt-2 border-l-2 border-blue-400 pl-2 py-1 bg-blue-50">
                  <p className="font-medium">Quan tr·ªçng:</p>
                  <p>Ch·ªçn ƒë√∫ng ng√¥n ng·ªØ b·∫°n ƒëang n√≥i ƒë·ªÉ ƒë·∫°t ƒë·ªô ch√≠nh x√°c cao nh·∫•t. Khi n√≥i ti·∫øng Vi·ªát, ch·ªçn Ti·∫øng Vi·ªát. Khi n√≥i ti·∫øng Anh, ch·ªçn English.</p>
                </div>
              </div>

              {/* Test Voice Recognition Button */}
              <div className="flex mt-2">
                <Button
                  onClick={toggleListening}
                  variant={isListening ? "secondary" : "outline"}
                  className={`w-full ${isListening ? "bg-red-100 border-red-300 text-red-600" : ""}`}
                >
                  {isListening ? (
                    <>
                      <Mic className="h-4 w-4 mr-2 animate-pulse text-red-500" />
                      ƒêang nghe... (nh·∫•n ƒë·ªÉ d·ª´ng)
                    </>
                  ) : (
                    <>
                      <Mic className="h-4 w-4 mr-2" />
                      Ki·ªÉm tra nh·∫≠n d·∫°ng gi·ªçng n√≥i
                    </>
                  )}
                </Button>
              </div>

              {/* Display recognition errors */}
              {recognitionError && !isListening && (
                <div className="p-2 bg-red-50 rounded-md text-red-700 text-sm mt-1">
                  <div className="flex items-center">
                    <Mic className="h-4 w-4 mr-2 text-red-500" />
                    {recognitionError}
                  </div>
                  <p className="text-xs mt-1 text-gray-500">
                    M·∫πo: H√£y n√≥i ch·∫≠m v√† r√µ r√†ng, ki·ªÉm tra microphone v√† ƒë·∫£m b·∫£o tr√¨nh duy·ªát ƒë√£ ƒë∆∞·ª£c c·∫•p quy·ªÅn.
                  </p>
                </div>
              )}

              {isListening && (
                <div className="p-2 bg-blue-50 rounded-md text-blue-700 text-sm mt-1">
                  <div className="flex items-center mb-1">
                    <div className="w-2 h-2 bg-red-500 rounded-full animate-ping mr-2"></div>
                    <span className="font-medium">ƒêang nghe...</span>
                  </div>
                  {interimTranscript ? interimTranscript : "H√£y n√≥i v√†o microphone..."}
                </div>
              )}

              {transcript && (
                <div className="p-2 bg-gray-50 rounded-md text-gray-700 text-sm mt-1 border">
                  <p className="font-medium text-xs text-gray-500 mb-1">K·∫øt qu·∫£ nh·∫≠n d·∫°ng:</p>
                  {transcript}
                  {transcript && (
                    <div className="flex justify-end mt-2">
                      <Button
                        size="sm"
                        variant="ghost"
                        className="h-6 text-xs"
                        onClick={() => {
                          if (showAiSidebar) {
                            setAiQuestion(transcript);
                          } else if (isChatDialogOpen) {
                            setChatDialogQuestion(transcript);
                          }
                          setTranscript("");
                        }}
                      >
                        D√πng k·∫øt qu·∫£ n√†y
                      </Button>
                      <Button
                        size="sm"
                        variant="ghost"
                        className="h-6 text-xs text-red-600"
                        onClick={() => setTranscript("")}
                      >
                        X√≥a
                      </Button>
                    </div>
                  )}
                </div>
              )}
            </div>

            {/* Voice Selection */}
            <div className="space-y-2">
              <Label htmlFor="voice" className="flex items-center">
                <Mic className="h-4 w-4 mr-2" /> Ch·ªçn gi·ªçng n√≥i
              </Label>
              <Select
                value={selectedVoice}
                onValueChange={setSelectedVoice}
                disabled={autoDetectLanguage}
              >
                <SelectTrigger id="voice" className={autoDetectLanguage ? "opacity-50" : ""}>
                  <SelectValue placeholder="Ch·ªçn gi·ªçng n√≥i" />
                </SelectTrigger>
                <SelectContent>
                  {autoDetectLanguage ? (
                    <SelectItem value="auto">T·ª± ƒë·ªông ch·ªçn gi·ªçng t·ªët nh·∫•t</SelectItem>
                  ) : (
                    <>
                      {/* Recommended voices section */}
                      {(supportedLanguages
                        .find(lang => lang.code === selectedLanguage)?.recommended?.length ?? 0) > 0 && (
                        <div className="px-2 py-1.5 text-sm font-medium text-muted-foreground">
                          Gi·ªçng ƒë·ªÅ xu·∫•t
                        </div>
                      )}
                      {supportedLanguages
                        .find(lang => lang.code === selectedLanguage)?.recommended
                        ?.map(recommendedVoice => {
                          const voice = availableVoices.find(v => v.name === recommendedVoice);
                          if (!voice) return null;
                          return (
                            <SelectItem key={voice.name} value={voice.name} className="flex items-center">
                              <div className="flex items-center">
                                <Star className="h-3 w-3 mr-2 text-yellow-500" />
                                {voice.name}
                              </div>
                            </SelectItem>
                          );
                        })}

                      {/* All available voices section */}
                      <div className="px-2 py-1.5 text-sm font-medium text-muted-foreground">
                        T·∫•t c·∫£ gi·ªçng ƒë·ªçc
                      </div>
                      {availableVoices
                        .filter(voice => voice.lang.includes(selectedLanguage.split('-')[0]))
                        .map((voice) => (
                          <SelectItem key={voice.name} value={voice.name}>
                            {voice.name} {voice.localService ? "" : "(online)"}
                          </SelectItem>
                        ))}
                    </>
                  )}
                </SelectContent>
              </Select>
              {selectedVoice && !autoDetectLanguage && (
                <div className="text-xs text-muted-foreground mt-1">
                  {availableVoices.find(v => v.name === selectedVoice)?.localService
                    ? "Gi·ªçng c∆° b·∫£n (offline)"
                    : "Gi·ªçng ch·∫•t l∆∞·ª£ng cao (online)"}
                </div>
              )}
            </div>

            {/* Speech Rate */}
            <div className="space-y-2">
              <div className="flex justify-between items-center">
                <Label htmlFor="rate" className="flex items-center">
                  <Timer className="h-4 w-4 mr-2" /> T·ªëc ƒë·ªô n√≥i
                </Label>
                <span className="text-sm text-gray-500">{speechRate.toFixed(1)}x</span>
              </div>
              <div className="flex items-center">
                <span className="text-sm text-gray-500 mr-2">Ch·∫≠m</span>
                <Slider
                  id="rate"
                  min={0.5}
                  max={2.0}
                  step={0.1}
                  value={[speechRate]}
                  onValueChange={values => setSpeechRate(values[0])}
                  className="flex-1"
                />
                <span className="text-sm text-gray-500 ml-2">Nhanh</span>
              </div>
            </div>

            {/* Speech Pitch */}
            <div className="space-y-2">
              <div className="flex justify-between items-center">
                <Label htmlFor="pitch" className="flex items-center">
                  <ArrowUpDown className="h-4 w-4 mr-2" /> Cao ƒë·ªô gi·ªçng
                </Label>
                <span className="text-sm text-gray-500">{speechPitch.toFixed(1)}</span>
              </div>
              <div className="flex items-center">
                <span className="text-sm text-gray-500 mr-2">Th·∫•p</span>
                <Slider
                  id="pitch"
                  min={0.5}
                  max={2.0}
                  step={0.1}
                  value={[speechPitch]}
                  onValueChange={values => setSpeechPitch(values[0])}
                  className="flex-1"
                />
                <span className="text-sm text-gray-500 ml-2">Cao</span>
              </div>
            </div>

            {/* Volume */}
            <div className="space-y-2">
              <div className="flex justify-between items-center">
                <Label htmlFor="volume" className="flex items-center">
                  <Volume className="h-4 w-4 mr-2" /> √Çm l∆∞·ª£ng
                </Label>
                <span className="text-sm text-gray-500">{Math.round(speechVolume * 100)}%</span>
              </div>
              <div className="flex items-center">
                <span className="text-sm text-gray-500 mr-2">Nh·ªè</span>
                <Slider
                  id="volume"
                  min={0}
                  max={1.0}
                  step={0.05}
                  value={[speechVolume]}
                  onValueChange={values => setSpeechVolume(values[0])}
                  className="flex-1"
                />
                <span className="text-sm text-gray-500 ml-2">L·ªõn</span>
              </div>
            </div>

            {/* Google TTS toggle */}
            <div className="flex items-center space-x-2 pt-2">
              <Switch
                id="google-tts"
                checked={useGoogleTTS}
                onCheckedChange={setUseGoogleTTS}
              />
              <div>
                <Label htmlFor="google-tts">Gi·ªçng cao c·∫•p Google TTS</Label>
                <p className="text-sm text-gray-500">
                  S·ª≠ d·ª•ng d·ªãch v·ª• Google Cloud TTS ch·∫•t l∆∞·ª£ng cao cho ti·∫øng Nh·∫≠t, H√†n, Trung, Th√°i
                </p>
              </div>
            </div>

            {/* Test Buttons */}
            <div className="grid grid-cols-2 gap-3 pt-2">
              <Button
                onClick={() => speakText("Xin ch√†o, ƒë√¢y l√† gi·ªçng n√≥i th·ª≠ nghi·ªám. B·∫°n c√≥ nghe r√µ kh√¥ng?")}
                className="w-full"
              >
                Ki·ªÉm tra ti·∫øng Vi·ªát
              </Button>
              <Button
                onClick={() => speakText("Hello, this is a test voice. Can you hear me clearly? I'm speaking English and it's working perfectly.")}
                className="w-full"
                variant="outline"
              >
                Test English
              </Button>
            </div>

            {/* Language Detection Test Buttons */}
            <div className="space-y-2 pt-2 border-t border-gray-200">
              <Label className="flex items-center">
                <Languages className="h-4 w-4 mr-2" /> Test ph√°t hi·ªán ng√¥n ng·ªØ
              </Label>
              <div className="grid grid-cols-2 gap-2">
                <Button
                  variant="outline"
                  size="sm"
                  onClick={() => speakText("Bonjour, comment allez-vous? Je suis tr√®s heureux de vous parler en fran√ßais.")}
                  className="justify-start text-xs"
                >
                  üá´üá∑ Test Fran√ßais
                </Button>
                <Button
                  variant="outline"
                  size="sm"
                  onClick={() => speakText("Guten Tag, wie geht es Ihnen? Ich spreche sehr gerne Deutsch mit Ihnen.")}
                  className="justify-start text-xs"
                >
                  üá©üá™ Test Deutsch
                </Button>
                <Button
                  variant="outline"
                  size="sm"
                  onClick={() => speakText("Hola, ¬øc√≥mo est√° usted? Me gusta mucho hablar espa√±ol con usted.")}
                  className="justify-start text-xs"
                >
                  üá™üá∏ Test Espa√±ol
                </Button>
                <Button
                  variant="outline"
                  size="sm"
                  onClick={() => speakText("Ciao, come stai? Mi piace molto parlare italiano con te.")}
                  className="justify-start text-xs"
                >
                  üáÆüáπ Test Italiano
                </Button>
                <Button
                  variant="outline"
                  size="sm"
                  onClick={() => speakText("Ol√°, como voc√™ est√°? Eu gosto muito de falar portugu√™s com voc√™.")}
                  className="justify-start text-xs"
                >
                  üáßüá∑ Test Portugu√™s
                </Button>
                <Button
                  variant="outline"
                  size="sm"
                  onClick={() => speakText("–ü—Ä–∏–≤–µ—Ç, –∫–∞–∫ –¥–µ–ª–∞? –ú–Ω–µ –æ—á–µ–Ω—å –Ω—Ä–∞–≤–∏—Ç—Å—è –≥–æ–≤–æ—Ä–∏—Ç—å –ø–æ-—Ä—É—Å—Å–∫–∏.")}
                  className="justify-start text-xs"
                >
                  üá∑üá∫ Test –†—É—Å—Å–∫–∏–π
                </Button>
                <Button
                  variant="outline"
                  size="sm"
                  onClick={() => speakText("‡∏™‡∏ß‡∏±‡∏™‡∏î‡∏µ‡∏Ñ‡∏£‡∏±‡∏ö ‡∏ú‡∏°‡∏ä‡∏∑‡πà‡∏≠ AI ‡∏ú‡∏°‡∏û‡∏π‡∏î‡∏†‡∏≤‡∏©‡∏≤‡πÑ‡∏ó‡∏¢‡πÑ‡∏î‡πâ‡∏Ñ‡∏£‡∏±‡∏ö")}
                  className="justify-start text-xs"
                >
                  üáπüá≠ Test ‡πÑ‡∏ó‡∏¢
                </Button>
                <Button
                  variant="outline"
                  size="sm"
                  onClick={() => speakText("Saya bisa berbahasa Indonesia dengan baik. Terima kasih sudah menggunakan sistem ini.")}
                  className="justify-start text-xs"
                >
                  üáÆüá© Test Indonesia
                </Button>
                <Button
                  variant="outline"
                  size="sm"
                  onClick={() => speakText("Saya boleh bercakap bahasa Malaysia dengan baik. Terima kasih kerana menggunakan sistem ini.")}
                  className="justify-start text-xs"
                >
                  üá≤üáæ Test Malaysia
                </Button>
                <Button
                  variant="outline"
                  size="sm"
                  onClick={() => speakText("Dzie≈Ñ dobry, bardzo lubiƒô m√≥wiƒá po polsku. To jest test jƒôzyka polskiego.")}
                  className="justify-start text-xs"
                >
                  üáµüá± Test Polski
                </Button>
                <Button
                  variant="outline"
                  size="sm"
                  onClick={() => speakText("Kumusta ka? Ako ay masaya na makausap ka sa Filipino. Salamat sa paggamit ng sistema na ito.")}
                  className="justify-start text-xs"
                >
                  üáµüá≠ Test Filipino
                </Button>
              </div>
            </div>

            {/* Voice presets for quick selection */}
            <div className="space-y-2 pt-2">
              <Label className="flex items-center">
                <Bookmark className="h-4 w-4 mr-2" /> C·∫•u h√¨nh nhanh
              </Label>
              <div className="grid grid-cols-2 gap-2">
                <Button
                  variant="outline"
                  size="sm"
                  onClick={() => {
                    setSelectedLanguage("vi-VN");
                    setSelectedVoice(getBestVoiceForLanguage("vi-VN") || "");
                    setSpeechRate(1.0);
                    setSpeechPitch(1.0);
                  }}
                  className="justify-start"
                >
                  <span className="mr-2">üáªüá≥</span> Ti·∫øng Vi·ªát - Nam
                </Button>
                <Button
                  variant="outline"
                  size="sm"
                  onClick={() => {
                    setSelectedLanguage("vi-VN");
                    setSelectedVoice("Microsoft HoaiMy Online");
                    setSpeechRate(1.0);
                    setSpeechPitch(1.2);
                  }}
                  className="justify-start"
                >
                  <span className="mr-2">üáªüá≥</span> Ti·∫øng Vi·ªát - N·ªØ
                </Button>
                <Button
                  variant="outline"
                  size="sm"
                  onClick={() => {
                    setSelectedLanguage("en-US");
                    setSelectedVoice(getBestVoiceForLanguage("en-US") || "");
                    setSpeechRate(0.9);
                    setSpeechPitch(1.0);
                  }}
                  className="justify-start"
                >
                  <span className="mr-2">üá∫üá∏</span> English - Male
                </Button>
                <Button
                  variant="outline"
                  size="sm"
                  onClick={() => {
                    setSelectedLanguage("en-US");
                    setSelectedVoice("Microsoft Aria Online");
                    setSpeechRate(0.9);
                    setSpeechPitch(1.1);
                  }}
                  className="justify-start"
                >
                  <span className="mr-2">üá∫üá∏</span> English - Female
                </Button>
              </div>
            </div>
          </div>
        </DialogContent>
      </Dialog>

      {/* Voice notification */}
      {showVoiceNotification && voiceNotification && (
        <div className="fixed top-4 sm:top-16 right-2 sm:right-4 left-2 sm:left-4 z-20">
          <div
            className="bg-black/80 text-white px-3 sm:px-4 py-2 sm:py-2.5 rounded-md shadow-lg text-xs sm:text-sm flex items-center"
            style={{
              animation: "fadeInOut 3s ease-in-out forwards",
            }}
          >
            <Volume2 className="h-3 w-3 sm:h-4 sm:w-4 mr-1 sm:mr-2 text-blue-400" />
            <div dangerouslySetInnerHTML={{ __html: voiceNotification }}></div>
          </div>
        </div>
      )}
    </div>
  )
}
